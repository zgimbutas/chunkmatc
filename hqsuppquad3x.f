cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c
c       This is the end of the debugging code and the beginning of the
c       quadrature code proper
c
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c
c
        subroutine hqsuppquad3x(norder,inode,xs,ws,npts) 
        implicit real *8 (a-h,o-z)
c
        dimension xs(*),ws(*)
c
        itype=2
c
c
        if( itype .eq. 0 ) then
        if( norder .eq. 1 ) call suppquad3x1(inode,xs,ws,npts)
        if( norder .eq. 2 ) call suppquad3x2(inode,xs,ws,npts)
        if( norder .eq. 3 ) call suppquad3x3(inode,xs,ws,npts)
        if( norder .eq. 4 ) call suppquad3x4(inode,xs,ws,npts)
        if( norder .eq. 5 ) call suppquad3x5(inode,xs,ws,npts)
        if( norder .eq. 6 ) call suppquad3x6(inode,xs,ws,npts)
        if( norder .eq. 8 ) call suppquad3x8(inode,xs,ws,npts)
        if( norder .eq. 10 ) call suppquad3x10(inode,xs,ws,npts)
        endif
c
c
        if( itype .eq. 1 ) then
        if( norder .eq. 1 ) call hsuppquad3x1(inode,xs,ws,npts)
        if( norder .eq. 2 ) call hsuppquad3x2(inode,xs,ws,npts)
        if( norder .eq. 3 ) call hsuppquad3x3(inode,xs,ws,npts)
        if( norder .eq. 4 ) call hsuppquad3x4(inode,xs,ws,npts)
        if( norder .eq. 5 ) call hsuppquad3x5(inode,xs,ws,npts)
        if( norder .eq. 6 ) call hsuppquad3x6(inode,xs,ws,npts)
        if( norder .eq. 8 ) call hsuppquad3x8(inode,xs,ws,npts)
        if( norder .eq. 10 ) call hsuppquad3x10(inode,xs,ws,npts)
        endif
c
c
        if( itype .eq. 2 ) then
        if( norder .eq. 1 ) call hqsuppquad3x1(inode,xs,ws,npts)
        if( norder .eq. 2 ) call hqsuppquad3x2(inode,xs,ws,npts)
        if( norder .eq. 3 ) call hqsuppquad3x3(inode,xs,ws,npts)
        if( norder .eq. 4 ) call hqsuppquad3x4(inode,xs,ws,npts)
        if( norder .eq. 5 ) call hqsuppquad3x5(inode,xs,ws,npts)
        if( norder .eq. 6 ) call hqsuppquad3x6(inode,xs,ws,npts)
        if( norder .eq. 8 ) call hqsuppquad3x8(inode,xs,ws,npts)
        if( norder .eq. 10 ) call hqsuppquad3x10(inode,xs,ws,npts)
        endif
c
c
        do i=1,npts        
        xs(i)=(xs(i)+1)/2
        ws(i)=ws(i)/2
        enddo
c
        return
        end
c
c
c
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c
c 
c
        subroutine suppquad3x1(inode,xs,ws,ns) 
        implicit real *8 (a-h,o-z)
        dimension xs(*),ws(*)
c
        dimension xs1(3),ws1(3)
c
c
c       This subroutine returns to the user special-purpose
c       quadratures. The quadrature number k (k=1) integrates
c       functions of the form
c       
c       f(x)=phi(x)+psi(x)*log(|x-x_k|),   (1)
c       
c       with phi and psi polynomials of order 3, and x_k one of the
c       Gaussian nodes on the interval [-1,1] (in a 1-point quadrature)
c
c       Approximate accuracy of the quadratures:
c
c       smooth, smooth x log - 15 digits ( 34 in extended precision )
c
c       Input parameters: 
c
c       inode - the node number of 1-point Legendre quadrature
c
c       Output parameters:
c
c       xs - the nodes of the quadrature
c       ws - the weights of the quadrature
c       ns - the number of quadrature points
c
c        
c
c
c nsupp = 1; npols = 3; nquad = 3; error = 1.148E-77
        data xs1 /
     $       -6.1328873086007008726700163629168190D-01,
     $        1.1777019747430538684569124454850701D-01,
     $        8.6163790754222582939713388597430108D-01/
        data ws1 /
     $        8.0650175350232884186632247504989233D-01,
     $        7.1752663504774251604307023871350418D-01,
     $        4.7597161144992864209060728623660349D-01/


        if( inode .eq. 1 ) then

        ns=3
        do i=1,ns
        xs(i)=xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        return
        end
c
c
c
c
c
        subroutine suppquad3x2(inode,xs,ws,ns) 
        implicit real *8 (a-h,o-z)
        dimension xs(*),ws(*)
c
        dimension xs1(6),ws1(6)
        dimension xs2(6),ws2(6)
c
c
c       This subroutine returns to the user special-purpose
c       quadratures. The quadrature number k (k=1,2) integrates
c       functions of the form
c       
c       f(x)=phi(x)+psi(x)*log(|x-x_k|),   (1)
c       
c       with phi and psi polynomials of order 6, and x_k one of the
c       Gaussian nodes on the interval [-1,1] (in a 2-point quadrature)
c
c       Approximate accuracy of the quadratures:
c
c       smooth, smooth x log - 15 digits ( 34 in extended precision )
c
c       Input parameters: 
c
c       inode - the node number of 2-point Legendre quadrature
c
c       Output parameters:
c
c       xs - the nodes of the quadrature
c       ws - the weights of the quadrature
c       ns - the number of quadrature points
c
c        
c
c
c nsupp = 2; npols = 6; nquad = 6; error = 2.635E-77
        data xs1 /
     $       -9.2353365601546958135573575012137378D-01,
     $       -7.0611436808930569797174132774805889D-01,
     $       -5.3034203202873531259193565904747970D-01,
     $       -1.0519469833060595806768193338042074D-01,
     $        4.8215995386084649613577883612430258D-01,
     $        8.9953996972438780747077754811856867D-01/
        data ws1 /
     $        1.8076884265315930895898873180316259D-01,
     $        1.9978658253079509403335534315709885D-01,
     $        2.4628915723673340875414944680489987D-01,
     $        5.6445702843298770830143059687098306D-01,
     $        5.4972171690193292464613240922109865D-01,
     $        2.5897667224439155530594347214275698D-01/


        if( inode .eq. 1 ) then

        ns=6
        do i=1,ns
        xs(i)=xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        if( inode .eq. 2 ) then

        ns=6
        do i=1,ns
        xs(i)=-xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        return
        end
c
c
c
c
c
        subroutine suppquad3x3(inode,xs,ws,ns) 
        implicit real *8 (a-h,o-z)
        dimension xs(*),ws(*)
c
        dimension xs1(9),ws1(9)
        dimension xs2(9),ws2(9)
c
c
c       This subroutine returns to the user special-purpose
c       quadratures. The quadrature number k (k=1,2,3) integrates
c       functions of the form
c       
c       f(x)=phi(x)+psi(x)*log(|x-x_k|),   (1)
c       
c       with phi and psi polynomials of order 9, and x_k one of the
c       Gaussian nodes on the interval [-1,1] (in a 3-point quadrature)
c
c       Approximate accuracy of the quadratures:
c
c       smooth, smooth x log - 15 digits ( 34 in extended precision )
c
c       Input parameters: 
c
c       inode - the node number of 3-point Legendre quadrature
c
c       Output parameters:
c
c       xs - the nodes of the quadrature
c       ws - the weights of the quadrature
c       ns - the number of quadrature points
c
c        
c
c
c nsupp = 3; npols = 9; nquad = 9; error = 7.712E-77
        data xs1 /
     $       -9.7585242497189265760458597251716683D-01,
     $       -8.9521610011746697241724629049542903D-01,
     $       -8.1317944202232757845150493741764559D-01,
     $       -7.5337833059336461762572569045976796D-01,
     $       -5.5612782592634379716171355746918499D-01,
     $       -1.9866588236305683679439787000313297D-01,
     $        2.4144431961727981536244342180691973D-01,
     $        6.5492124892206967903665622851212977D-01,
     $        9.3032072913166334341351305354976768D-01/
        data ws1 /
     $        5.8916530078238193153457981233083829D-02,
     $        9.1455609125475777407953944027726157D-02,
     $        6.0580537622981344826491858806368966D-02,
     $        1.0327945534231947898874302643698600D-01,
     $        2.8674206797355074745339250383378226D-01,
     $        4.1507438994267163103341571497554390D-01,
     $        4.4640672647947119360465530541174151D-01,
     $        3.6131964883527781725351914051440508D-01,
     $        1.7622503460001381627837052476036230D-01/
c nsupp = 3; npols = 9; nquad = 9; error = 5.973E-77
        data xs2 /
     $       -9.8094855665526624829111571706714916D-01,
     $       -8.2352814082851716336317436186802867D-01,
     $       -5.2812233596212807855183491452355056D-01,
     $       -2.1619509889488994043148144684014509D-01,
     $       -1.8495967440697495301598425276076210D-02,
     $        1.1093570092216740797807449983771059D-01,
     $        3.7941282488290354157662792400670595D-01,
     $        7.0013808011484884223536179424138934D-01,
     $        9.3752589310168249546618667649321172D-01/
        data ws2 /
     $        6.7480767490628581745111740521512851D-02,
     $        2.4239203635973320710840773454779046D-01,
     $        3.2688337664765654659711344721548040D-01,
     $        2.7432789824535940335492119528344989D-01,
     $        1.1562547482745743662969335849155901D-01,
     $        1.9858435397184549804006838962166890D-01,
     $        3.1732213572052218842492042323467057D-01,
     $        3.0053057461673301835583194847039231D-01,
     $        1.5685338212006411974393176261347560D-01/


        if( inode .eq. 1 ) then

        ns=9
        do i=1,ns
        xs(i)=xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        if( inode .eq. 2 ) then

        ns=9
        do i=1,ns
        xs(i)=xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 3 ) then

        ns=9
        do i=1,ns
        xs(i)=-xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        return
        end
c
c
c
c
c
        subroutine suppquad3x4(inode,xs,ws,ns) 
        implicit real *8 (a-h,o-z)
        dimension xs(*),ws(*)
c
        dimension xs1(12),ws1(12)
        dimension xs2(12),ws2(12)
c
c
c       This subroutine returns to the user special-purpose
c       quadratures. The quadrature number k (k=1,2,...,4) integrates
c       functions of the form
c       
c       f(x)=phi(x)+psi(x)*log(|x-x_k|),   (1)
c       
c       with phi and psi polynomials of order 12, and x_k one of the
c       Gaussian nodes on the interval [-1,1] (in a 4-point quadrature)
c
c       Approximate accuracy of the quadratures:
c
c       smooth, smooth x log - 15 digits ( 34 in extended precision )
c
c       Input parameters: 
c
c       inode - the node number of 4-point Legendre quadrature
c
c       Output parameters:
c
c       xs - the nodes of the quadrature
c       ws - the weights of the quadrature
c       ns - the number of quadrature points
c
c        
c
c
c nsupp = 4; npols = 12; nquad = 12; error = 7.315E-77
        data xs1 /
     $       -9.8845595292986393351450120590703546D-01,
     $       -9.4679070719404183818008785726245770D-01,
     $       -8.9655480046947454582490404570590204D-01,
     $       -8.6370944051997397461823628219081147D-01,
     $       -8.1635871482084129850087968498917975D-01,
     $       -6.8139273764385144041711075055059066D-01,
     $       -4.5449425910072166227872318213146279D-01,
     $       -1.5288975956847401237447295161568532D-01,
     $        1.8785012955219464770152435684908660D-01,
     $        5.1973652840916306038637616835064886D-01,
     $        7.9150354357212698287411544289948155D-01,
     $        9.5897748604162536128333790722042793D-01/
        data ws1 /
     $        2.8680891525719378201011913023257896D-02,
     $        5.0523410840491875432747842931693168D-02,
     $        4.5778713693191848069582367370345404D-02,
     $        2.2349957621985069075411490123220911D-02,
     $        8.8029054599596122391162112921060180D-02,
     $        1.8214039278720709087068153820742121D-01,
     $        2.6877634180722796639491555267929309D-01,
     $        3.2840006596683324238001200123937436D-01,
     $        3.4492469016289330237478623563994682D-01,
     $        3.1012573271486558895645018906509336D-01,
     $        2.2588233004764866601453384885842024D-01,
     $        1.0438841823233984983870490794087336D-01/
c nsupp = 4; npols = 12; nquad = 12; error = 3.459E-77
        data xs2 /
     $       -9.8420886026570687406511949737830574D-01,
     $       -9.0529579096667275067573359183997368D-01,
     $       -7.6137016221564340231772270991784258D-01,
     $       -5.8867613057425223072819150750543349D-01,
     $       -4.3615776853600325488556908857243362D-01,
     $       -3.4735107501539596422238823632594591D-01,
     $       -2.6606455866444787903905765756462933D-01,
     $       -6.8606870800058761431074248637304077D-02,
     $        2.1391133783953579089190292880385342D-01,
     $        5.2137398132340310313545969945747165D-01,
     $        7.8834669558289203423790967591937668D-01,
     $        9.5795163603050964903436849579975672D-01/
        data ws2 /
     $        4.2868423520426026645737467045822994D-02,
     $        1.1517657310944723389451114838103647D-01,
     $        1.6615046910639808612237669919162698D-01,
     $        1.7078903913397743520615463712875752D-01,
     $        1.2705063106818759368072391244021834D-01,
     $        5.3630518744093494012558472344266918D-02,
     $        1.3851349365580400145223993289069757D-01,
     $        2.4890317732590565640680318418572904D-01,
     $        3.0590871437677360324424671669643345D-01,
     $        2.9787150372657839328717864668561056D-01,
     $        2.2637806480788653949196141251245602D-01,
     $        1.0675939142452193655550777049734413D-01/


        if( inode .eq. 1 ) then

        ns=12
        do i=1,ns
        xs(i)=xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        if( inode .eq. 2 ) then

        ns=12
        do i=1,ns
        xs(i)=xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 3 ) then

        ns=12
        do i=1,ns
        xs(i)=-xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 4 ) then

        ns=12
        do i=1,ns
        xs(i)=-xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        return
        end
c
c
c
c
c
        subroutine suppquad3x5(inode,xs,ws,ns) 
        implicit real *8 (a-h,o-z)
        dimension xs(*),ws(*)
c
        dimension xs1(15),ws1(15)
        dimension xs2(15),ws2(15)
        dimension xs3(15),ws3(15)
c
c
c       This subroutine returns to the user special-purpose
c       quadratures. The quadrature number k (k=1,2,...,5) integrates
c       functions of the form
c       
c       f(x)=phi(x)+psi(x)*log(|x-x_k|),   (1)
c       
c       with phi and psi polynomials of order 15, and x_k one of the
c       Gaussian nodes on the interval [-1,1] (in a 5-point quadrature)
c
c       Approximate accuracy of the quadratures:
c
c       smooth, smooth x log - 15 digits ( 34 in extended precision )
c
c       Input parameters: 
c
c       inode - the node number of 5-point Legendre quadrature
c
c       Output parameters:
c
c       xs - the nodes of the quadrature
c       ws - the weights of the quadrature
c       ns - the number of quadrature points
c
c        
c
c
c nsupp = 5; npols = 15; nquad = 15; error = 5.796E-77
        data xs1 /
     $       -9.9366114906626290425471127717044131D-01,
     $       -9.7041161651282731278886651026340401D-01,
     $       -9.4057488168380920744360973958628049D-01,
     $       -9.1666700944265350954371398045956596D-01,
     $       -8.9984059475157173630596097364834095D-01,
     $       -8.3973582721859279233025829137742349D-01,
     $       -7.1978936865112970668686763418067498D-01,
     $       -5.4296004746311514617321297331401320D-01,
     $       -3.1781238704281011096883272192456041D-01,
     $       -5.9258582423421227905301867283960091D-02,
     $        2.1245050477700161411457556044392591D-01,
     $        4.7394309210946780076312859008480559D-01,
     $        7.0154744574937202733980610852710493D-01,
     $        8.7414950822554888424861618998662062D-01,
     $        9.7563943401928119372763706489227026D-01/
        data ws1 /
     $        1.5780102825564697030566184867669694D-02,
     $        2.8719711084362570959385304835613240D-02,
     $        2.8707424746584623662625738357443014D-02,
     $        1.6546739890242903801883710459979405D-02,
     $        3.0450625267010427785252313257820186D-02,
     $        9.0149644558286982300692074556666215D-02,
     $        1.4929111903886594362321045435186862D-01,
     $        2.0295240819094532257246700809823454D-01,
     $        2.4483920487202493770089810327856973D-01,
     $        2.6885486385178409320436127333106839D-01,
     $        2.7061962160499744579635435907635841D-01,
     $        2.4837147945160556917896353974099535D-01,
     $        2.0327707532159356275385281103793576D-01,
     $        1.3921064582101705196502090276868200D-01,
     $        6.2229333475113867664466221981095460D-02/
c nsupp = 5; npols = 15; nquad = 15; error = 4.868E-77
        data xs2 /
     $       -9.8527939391797344888405052741542582D-01,
     $       -9.2612309456488741999163221141942716D-01,
     $       -8.3365709594492869643016306719715013D-01,
     $       -7.2803922289773395573941635870239774D-01,
     $       -6.3173687160663204330249681261822910D-01,
     $       -5.6493806045057966382188163202379709D-01,
     $       -5.2965066434562279421082715196161601D-01,
     $       -4.4108445397545296633333665908413619D-01,
     $       -2.7469025970160382903467373247945778D-01,
     $       -4.9962093004002421098720822046187461D-02,
     $        2.0654943767901391498022712925628080D-01,
     $        4.6470363925705228909112385958080786D-01,
     $        6.9471845679166698145246787385189721D-01,
     $        8.7100377685381722516176582010566746D-01,
     $        9.7501880140745081528476121012918724D-01/
        data ws2 /
     $        3.7346543801963963232272063352603473D-02,
     $        7.8732821784978256930835874180773126D-02,
     $        1.0275698620602234466798623951702618D-01,
     $        1.0465472753048655612069741531530413D-01,
     $        8.4499145155887988542498395247711841D-02,
     $        4.5755196361686372447135118528204877D-02,
     $        4.6749855893240679169450615793663760D-02,
     $        1.2998270180131051920747585283455356D-01,
     $        1.9950428286035712436587076620951332D-01,
     $        2.4546987466291345965007244537046734D-01,
     $        2.6246223098853882802392784097668692D-01,
     $        2.4881631476530363616556467767651958D-01,
     $        2.0689929511585736231193392756622838D-01,
     $        1.4255817606625547478260988499389205D-01,
     $        6.3811847005197434381668882436851464D-02/
c nsupp = 5; npols = 15; nquad = 15; error = 3.403E-77
        data xs3 /
     $       -9.9282677441542251538393395862148110D-01,
     $       -9.3125992004208366118787009874108641D-01,
     $       -8.0033986083873186151970253043403028D-01,
     $       -6.2009626862773430317030792924463160D-01,
     $       -4.1970185583171248542659707203833964D-01,
     $       -2.3162002657916703385917549734378488D-01,
     $       -8.6270092599364735209635451275811732D-02,
     $       -7.0516958282364172489233546436095926D-03,
     $        4.2880072594347743306761664359702494D-02,
     $        1.5719287967954106510634292343556156D-01,
     $        3.2732646563912890051915808025677125D-01,
     $        5.2559736547535613453805833744866601D-01,
     $        7.1987092021490309459695067491993936D-01,
     $        8.7863816976336017930488277704865817D-01,
     $        9.7615709696033227977924577513763342D-01/
        data ws3 /
     $        2.5482021718891125026566441444831028D-02,
     $        9.8405401215076602124235603834092099D-02,
     $        1.5990727506495275001111720254089583D-01,
     $        1.9563212867620725385688556048355699D-01,
     $        1.9965576886704020205922219282431207D-01,
     $        1.7135248371738076163072278014171332D-01,
     $        1.1542183999925121408016896706175010D-01,
     $        4.4192576206922367221667730672119218D-02,
     $        7.8745383735773837790063186707959274D-02,
     $        1.4624273211880020288204448330711357D-01,
     $        1.8934466720521568246678269851812570D-01,
     $        2.0175344895742363977033433176804730D-01,
     $        1.8145469810895007830843341874251478D-01,
     $        1.3171443332966384746476673149167284D-01,
     $        6.0695141078450435306988670461295884D-02/


        if( inode .eq. 1 ) then

        ns=15
        do i=1,ns
        xs(i)=xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        if( inode .eq. 2 ) then

        ns=15
        do i=1,ns
        xs(i)=xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 3 ) then

        ns=15
        do i=1,ns
        xs(i)=xs3(i)
        ws(i)=ws3(i)
        enddo

        endif

        if( inode .eq. 4 ) then

        ns=15
        do i=1,ns
        xs(i)=-xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 5 ) then

        ns=15
        do i=1,ns
        xs(i)=-xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        return
        end
c
c
c
c
c
        subroutine suppquad3x6(inode,xs,ws,ns) 
        implicit real *8 (a-h,o-z)
        dimension xs(*),ws(*)
c
        dimension xs1(18),ws1(18)
        dimension xs2(18),ws2(18)
        dimension xs3(18),ws3(18)
c
c
c       This subroutine returns to the user special-purpose
c       quadratures. The quadrature number k (k=1,2,...,6) integrates
c       functions of the form
c       
c       f(x)=phi(x)+psi(x)*log(|x-x_k|),   (1)
c       
c       with phi and psi polynomials of order 18, and x_k one of the
c       Gaussian nodes on the interval [-1,1] (in a 6-point quadrature)
c
c       Approximate accuracy of the quadratures:
c
c       smooth, smooth x log - 15 digits ( 34 in extended precision )
c
c       Input parameters: 
c
c       inode - the node number of 6-point Legendre quadrature
c
c       Output parameters:
c
c       xs - the nodes of the quadrature
c       ws - the weights of the quadrature
c       ns - the number of quadrature points
c
c        
c
c
c nsupp = 6; npols = 18; nquad = 18; error = 9.357E-77
        data xs1 /
     $       -9.9617713014851315034607184810989708D-01,
     $       -9.8173928450626763994394977732933960D-01,
     $       -9.6197621114259010923781365393744285D-01,
     $       -9.4387730930109063269430353513572503D-01,
     $       -9.3328263021701024556833441666642386D-01,
     $       -9.1898136694834764256797120402697503D-01,
     $       -8.7418464085189091896341296478627160D-01,
     $       -7.9088428742506643415182767789754273D-01,
     $       -6.6689860070041230972228720307329962D-01,
     $       -5.0391488057419892513870769476914416D-01,
     $       -3.0738868286748514243324965195467440D-01,
     $       -8.6461219661148506189530441262038617D-02,
     $        1.4656587015416001974645092143731122D-01,
     $        3.7718021065130277383123832552334945D-01,
     $        5.8991373229536513268956458542512268D-01,
     $        7.6975695479771730152763843889350734D-01,
     $        9.0357680849493446492417720081666654D-01,
     $        9.8140407403403820785230433907195003D-01/
        data ws1 /
     $        9.5768451209954166656312627072980778D-03,
     $        1.8271143549431199390496224988348253D-02,
     $        2.0048860331557390713105136757732645D-02,
     $        1.5230162931837802265423901147026963D-02,
     $        6.8519269864031868908066408430801491D-03,
     $        2.7423215698766949911979113797569567D-02,
     $        6.3326562847711072595462037546705570D-02,
     $        1.0361590235618761262148017643157011D-01,
     $        1.4407654653024652264969342202907394D-01,
     $        1.8098093232001066238179347680721768D-01,
     $        2.1053902240837381139977627250229853D-01,
     $        2.2924950465066242658123242810914455D-01,
     $        2.3436467557177282250730286830593849D-01,
     $        2.2426204448924853303959688936808497D-01,
     $        1.9867942934817137353836103371185704D-01,
     $        1.5879663562551595795048719749457073D-01,
     $        1.0716263166867134311092161728955835D-01,
     $        4.7543957564435915786450300162924389D-02/
c nsupp = 6; npols = 18; nquad = 18; error = 5.495E-77
        data xs2 /
     $       -9.9157319249103496702465278523187701D-01,
     $       -9.5732977831127905011338613421386279D-01,
     $       -9.0229056247053195046511192261220923D-01,
     $       -8.3602612554139966368447556733610408D-01,
     $       -7.6950975221205914725248603759846366D-01,
     $       -7.1326818234912284913723584237980840D-01,
     $       -6.7594011055404391887051100854073850D-01,
     $       -6.5496562870292626691656075633341011D-01,
     $       -5.9391816918894742724893458868010333D-01,
     $       -4.7599449477625187378550414093166330D-01,
     $       -3.0905961241651362414851116334024319D-01,
     $       -1.0485626653220669877148657698406233D-01,
     $        1.2159885671388347908434856264463661D-01,
     $        3.5297574697288340857385681370491056D-01,
     $        5.7097196565315805571686948524121894D-01,
     $        7.5789001876996143298880533524968113D-01,
     $        8.9826147356686177183669469850266855D-01,
     $        9.8034268859911984595657101360245419D-01/
        data ws2 /
     $        2.1423488383832451767758521769653435D-02,
     $        4.6017440595584231393120588723292778D-02,
     $        6.2430709338622422929526203861276162D-02,
     $        6.8237941466160739601090956426797149D-02,
     $        6.3014925864667937390300765650481177D-02,
     $        4.7978516134649845346935882879363773D-02,
     $        2.4918295573924210699454424153289644D-02,
     $        3.1616259872360568122819131572280558D-02,
     $        9.0444426914298887745534543046359828D-02,
     $        1.4407995949149166356049905107499236D-01,
     $        1.8782388409805313138248560307804834D-01,
     $        2.1806390411976481149803733522376545D-01,
     $        2.3193529123077336906804426661290215D-01,
     $        2.2774132380899288121006869436695062D-01,
     $        2.0527399907518215260676090766124274D-01,
     $        1.6595895076702013641336011430069006D-01,
     $        1.1280474731809476728346296127422550D-01,
     $        5.0235935946525791980740048324388272D-02/
c nsupp = 6; npols = 18; nquad = 18; error = 4.251E-77
        data xs3 /
     $       -9.8856720829231786932440077727830839D-01,
     $       -9.4018274564165868704155523435674139D-01,
     $       -8.5606375295081567529607709927785112D-01,
     $       -7.4373274685375716678608830187627826D-01,
     $       -6.1547503193741467018934775144703130D-01,
     $       -4.8648903926738679782080714699951374D-01,
     $       -3.7252669214281281009502782058811842D-01,
     $       -2.8763300329492243371112685308729184D-01,
     $       -2.4235031663705158016478648317262739D-01,
     $       -2.0534807169296817758644764552434287D-01,
     $       -1.1334541562572101493769521123567854D-01,
     $        2.9596258289559889920148823985098657D-02,
     $        2.0871478612175553220487899677913361D-01,
     $        4.0558629438515443684270942749619586D-01,
     $        5.9995202312092011201168715573663773D-01,
     $        7.7179675040647534210018668074023961D-01,
     $        9.0341454423641847239760276531813656D-01,
     $        9.8126558613225261686619432854452326D-01/
        data ws3 /
     $        2.9307960364873977670149509733708439D-02,
     $        6.7061919723358953801609396384005159D-02,
     $        9.9918457322372730032856366206563087D-02,
     $        1.2266165683099366919191670912118153D-01,
     $        1.3128017120850104858911599931426786D-01,
     $        1.2402853739641802157504074208108394D-01,
     $        1.0152247883924934753656452641863704D-01,
     $        6.6572673546653408413030765167588865D-02,
     $        2.6150184861292049500321434485967149D-02,
     $        6.2658836562634079855141278489783786D-02,
     $        1.1955502114475865821887156382033201D-01,
     $        1.6384888258111132145669504781611386D-01,
     $        1.9128593294151828008585472508601922D-01,
     $        1.9904543700021564089625696313783473D-01,
     $        1.8631521396507235019897078048479210D-01,
     $        1.5439209500910859731166515860092385D-01,
     $        1.0656057464812342185753233586100022D-01,
     $        4.7833966053744443808406697790197152D-02/

        
        if( inode .eq. 1 ) then

        ns=18
        do i=1,ns
        xs(i)=xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        if( inode .eq. 2 ) then

        ns=18
        do i=1,ns
        xs(i)=xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 3 ) then

        ns=18
        do i=1,ns
        xs(i)=xs3(i)
        ws(i)=ws3(i)
        enddo

        endif

        if( inode .eq. 4 ) then

        ns=18
        do i=1,ns
        xs(i)=-xs3(i)
        ws(i)=ws3(i)
        enddo

        endif

        if( inode .eq. 5 ) then

        ns=18
        do i=1,ns
        xs(i)=-xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 6 ) then

        ns=18
        do i=1,ns
        xs(i)=-xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        return
        end
c
c
c
c
c
        subroutine suppquad3x8(inode,xs,ws,ns) 
        implicit real *8 (a-h,o-z)
        dimension xs(*),ws(*)
c
        dimension xs1(24),ws1(24)
        dimension xs2(24),ws2(24)
        dimension xs3(24),ws3(24)
        dimension xs4(24),ws4(24)
c
c
c       This subroutine returns to the user special-purpose
c       quadratures. The quadrature number k (k=1,2,...,8) integrates
c       functions of the form
c       
c       f(x)=phi(x)+psi(x)*log(|x-x_k|),   (1)
c       
c       with phi and psi polynomials of order 24, and x_k one of the
c       Gaussian nodes on the interval [-1,1] (in a 8-point quadrature)
c
c       Approximate accuracy of the quadratures:
c
c       smooth, smooth x log - 15 digits ( 34 in extended precision )
c
c       Input parameters: 
c
c       inode - the node number of 8-point Legendre quadrature
c
c       Output parameters:
c
c       xs - the nodes of the quadrature
c       ws - the weights of the quadrature
c       ns - the number of quadrature points
c
c        
c
c
c nsupp = 8; npols = 24; nquad = 24; error = 9.336E-77
        data xs1 /
     $       -9.9842140968771809758027038326700269D-01,
     $       -9.9222038927141895863555940392059875D-01,
     $       -9.8297965378708439234678619899105548D-01,
     $       -9.7314306039358740483907672816473006D-01,
     $       -9.6505820093505494421041456717475556D-01,
     $       -9.6060075518288576558104051753390755D-01,
     $       -9.5237469058709809543521836446786095D-01,
     $       -9.2827521306627616090900833968737928D-01,
     $       -8.8597087770188168123353029973922532D-01,
     $       -8.2358745705900937603062269729857090D-01,
     $       -7.3990776558180664568439003902810778D-01,
     $       -6.3471733911101819141609276520887652D-01,
     $       -5.0897669231540460286491289924811506D-01,
     $       -3.6488541061443919888962190798747062D-01,
     $       -2.0585334278055148636603188496262024D-01,
     $       -3.6386196693039155055878064491874770D-02,
     $        1.3810546808409544958150746256232944D-01,
     $        3.1156143056465751616485609619857343D-01,
     $        4.7757533994359579445151249774465857D-01,
     $        6.2972796484270588709957469493919568D-01,
     $        7.6192975890805725416500327969955473D-01,
     $        8.6875184140749863378995597507129458D-01,
     $        9.4572591715890146708040277572817475D-01,
     $        9.8960627969417079522269814783542514D-01/
        data ws1 /
     $        3.9867705201974492643055682524957562D-03,
     $        8.1028511756327045943817952306018833D-03,
     $        9.9588582082310897214168409796469118D-03,
     $        9.3203378922817754435451701802627769D-03,
     $        6.6397391988229714375537268410860790D-03,
     $        3.1438720015312765422967791919856142D-03,
     $        1.5658896976052538328082696865329492D-02,
     $        3.2861650969760513035276061989624657D-02,
     $        5.2070578043309219253115578247453573D-02,
     $        7.2904420171226102778270196333835037D-02,
     $        9.4493467687086438239165010782920048D-02,
     $        1.1572834381758899933909623650893412D-01,
     $        1.3538585707050830381378125653020114D-01,
     $        1.5222647048090380673076006235142603D-01,
     $        1.6508350079685732593266260740063948D-01,
     $        1.7294474029345489518902020719068196D-01,
     $        1.7502344882097995126379777984337612D-01,
     $        1.7081514777619695805797830584716299D-01,
     $        1.6013703926333192157396886373579529D-01,
     $        1.4314772189643445678190425822253223D-01,
     $        1.2034601832405245304744973954270624D-01,
     $        9.2549169106315250508243166184080864D-02,
     $        6.0853605401225854776229532984099082D-02,
     $        2.6617494108017744347698558763122631D-02/
c nsupp = 8; npols = 24; nquad = 24; error = 6.424E-77
        data xs2 /
     $       -9.9675163074603780315620548423415442D-01,
     $       -9.8311090578846134734362923650957559D-01,
     $       -9.5973683725931450681463997554835949D-01,
     $       -9.2906221816811912798392543979760870D-01,
     $       -8.9465063982202124864655217832261293D-01,
     $       -8.6059679786781093627619012958614089D-01,
     $       -8.3090800839516799943238570833934851D-01,
     $       -8.0899419188458377168721017068907713D-01,
     $       -7.9748599798403491136369953168855528D-01,
     $       -7.8039352304776038881826388784340576D-01,
     $       -7.3306518012889937745780519701997112D-01,
     $       -6.5531778765263735393533087684287460D-01,
     $       -5.4911266169151974595930497104594546D-01,
     $       -4.1748334162162684727856334405998595D-01,
     $       -2.6464665067157055300259422196087054D-01,
     $       -9.5981427150053601640121512505822496D-02,
     $        8.2119667290861808012234438787949984D-02,
     $        2.6250604632690486935976635745905560D-01,
     $        4.3760541870994641757588266458496596D-01,
     $        5.9981046542196432911591340509419785D-01,
     $        7.4188592420089393603647211647426305D-01,
     $        8.5736708787544543587477537504996752D-01,
     $        9.4092352760142026727509319103944223D-01,
     $        9.8867662235745429149867522096256782D-01/
        data ws2 /
     $        8.3138600344700117429430538219594703D-03,
     $        1.8797063531679688087754309777940853D-02,
     $        2.7540986790608266541497363440123280D-02,
     $        3.3203337509251624000824815323483546D-02,
     $        3.4926852454042396972106192764966795D-02,
     $        3.2504759765959105622270416185735110D-02,
     $        2.6302990247235022256477937540093962D-02,
     $        1.7247969286339779711217087039316445D-02,
     $        7.5701883524495511675341680821929663D-03,
     $        3.1675866795700147294654275487128424D-02,
     $        6.2785623327741502673130928939050786D-02,
     $        9.2386583296087454942368596311817299D-02,
     $        1.1951991670271596319297759171732319D-01,
     $        1.4303555882102723929761489749550977D-01,
     $        1.6173882986792290718969931779344992D-01,
     $        1.7452184135358123825762354479863357D-01,
     $        1.8048290764409489984280325720640933D-01,
     $        1.7902128530331690174073799431239631D-01,
     $        1.6990271865338285424806685035452627D-01,
     $        1.5329479215490924031463897105619947D-01,
     $        1.2977256378823224580791217214134485D-01,
     $        1.0029617383093685071251651595475672D-01,
     $        6.6165038734022000978503957601335627D-02,
     $        2.8992291754293107404125784854306045D-02/
c nsupp = 8; npols = 24; nquad = 24; error = 6.455E-77
        data xs3 /
     $       -9.9400402325670497794570983319182624D-01,
     $       -9.6899709904587827550966411645368962D-01,
     $       -9.2634759961355665829948931521952523D-01,
     $       -8.6980463243984926959816724709808378D-01,
     $       -8.0428754982098970536394488363398083D-01,
     $       -7.3541898700452627145088107158795876D-01,
     $       -6.6903132300896355613724590951461125D-01,
     $       -6.1068245404754117646385837522582794D-01,
     $       -5.6521864715621619510427125059959312D-01,
     $       -5.3644414406899286363869627720388040D-01,
     $       -5.2193541767689540838268479495113379D-01,
     $       -4.8532297461503712061772231602661815D-01,
     $       -4.1396239294861395248575864360532633D-01,
     $       -3.1117763324168043129615035350373448D-01,
     $       -1.8186684640206312328581825241669992D-01,
     $       -3.2233407139298933163309110403737733D-02,
     $        1.3050193300414550507727622320778282D-01,
     $        2.9844823367468543167264951570238226D-01,
     $        4.6343582454530432412071045206763702D-01,
     $        6.1742878731310609529504032888189920D-01,
     $        7.5293167526891292697326449476203937D-01,
     $        8.6336421661969692894076150502216845D-01,
     $        9.4338280356197925696236946173741041D-01,
     $        9.8914578655200862468582424997309498D-01/
        data ws3 /
     $        1.5319727607101750137097203602182832D-02,
     $        3.4333545505368617742739770188050238D-02,
     $        5.0333449436845905818649724850985471D-02,
     $        6.1924768205656585316658196853590081D-02,
     $        6.8163970461456120694126947930731080D-02,
     $        6.8592937703650172013365921975662301D-02,
     $        6.3248672155580724009351796795130128D-02,
     $        5.2635357762845212646449749479082650D-02,
     $        3.7647012299690584714449909429814125D-02,
     $        1.9100040142162304897772962178131322D-02,
     $        1.9094543166865032645767252240642092D-02,
     $        5.4391158223008525869548248504034059D-02,
     $        8.7767915810753358408313141522120073D-02,
     $        1.1698144147546478460539967539026428D-01,
     $        1.4060144005363292995808175711426365D-01,
     $        1.5745615395438756992344403695273997D-01,
     $        1.6669278849463575341064593350680707D-01,
     $        1.6783126101466165778361667520732935D-01,
     $        1.6079775812131945061152488468151628D-01,
     $        1.4593262851071987522178834415268984D-01,
     $        1.2397105001038738623071659377661968D-01,
     $        9.5999141471200290443813818678498917D-02,
     $        6.3393431851700731419348354805141429D-02,
     $        2.7789806560904675477329100183973078D-02/
c nsupp = 8; npols = 24; nquad = 24; error = 6.360E-77
        data xs4 /
     $       -9.9251023199954751517698981748661530D-01,
     $       -9.6095047886379816534272614503584125D-01,
     $       -9.0590398958705391838909224867871535D-01,
     $       -8.3043901559776636520637621829844083D-01,
     $       -7.3907273138774236399642779545889641D-01,
     $       -6.3757170272812555387710849733944762D-01,
     $       -5.3257663813773605137052635396608292D-01,
     $       -4.3111419921343332959534556436135051D-01,
     $       -3.4006777113251318855196343533482405D-01,
     $       -2.6566225941018739688950782878605263D-01,
     $       -2.1299499043909004136405213230259273D-01,
     $       -1.8569271109259953670054360273271674D-01,
     $       -1.6471172295840937445641723905727852D-01,
     $       -1.1231697419837443434765234539385144D-01,
     $       -2.8423236505502687795509347157583803D-02,
     $        8.1861784209279570881906586908674889D-02,
     $        2.1187769764243768305053079116245525D-01,
     $        3.5377466212294779021732346023798751D-01,
     $        4.9898351420298306706088050486567175D-01,
     $        6.3873228003265676168510987133343615D-01,
     $        7.6457607677006130816469654698629972D-01,
     $        8.6890823240633095259368886885854061D-01,
     $        9.4542241271482575207113902496033790D-01,
     $        9.8950928688145053785445974350843141D-01/
        data ws4 /
     $        1.9174475533924000331394311296104314D-02,
     $        4.3689700531111990579702501724633333D-02,
     $        6.5891313859859285516568886542930354D-02,
     $        8.4282484783422376719314533470096120D-02,
     $        9.7482547703860659013246427647698789D-02,
     $        1.0440441139441973865290958489933561D-01,
     $        1.0440565700773231673088581588095497D-01,
     $        9.7363314683264815761651771280339955D-02,
     $        8.3684275210000233194983650269008247D-02,
     $        6.4270140821709902301126985020886529D-02,
     $        4.0495564159418617455194411677133171D-02,
     $        1.5472619747563049800021770211664626D-02,
     $        3.5277507919515109473615882914563410D-02,
     $        6.8855687447964196899183674627922441D-02,
     $        9.8079223674037307529541889657600361D-02,
     $        1.2137422213993229475334593353436200D-01,
     $        1.3734137479152954369803981761769485D-01,
     $        1.4501567482029049380645445069431909D-01,
     $        1.4393112475258080400336390712849833D-01,
     $        1.3415033407045664912697215497097787D-01,
     $        1.1626171950370864690172874566408686D-01,
     $        9.1345011892592118983103852013782914D-02,
     $        6.0909027172525849674880337637738432D-02,
     $        2.6842586378579999092768703617667423D-02/

        
        if( inode .eq. 1 ) then

        ns=24
        do i=1,ns
        xs(i)=xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        if( inode .eq. 2 ) then

        ns=24
        do i=1,ns
        xs(i)=xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 3 ) then

        ns=24
        do i=1,ns
        xs(i)=xs3(i)
        ws(i)=ws3(i)
        enddo

        endif

        if( inode .eq. 4 ) then

        ns=24
        do i=1,ns
        xs(i)=xs4(i)
        ws(i)=ws4(i)
        enddo

        endif

        if( inode .eq. 5 ) then

        ns=24
        do i=1,ns
        xs(i)=-xs4(i)
        ws(i)=ws4(i)
        enddo

        endif

        if( inode .eq. 6 ) then

        ns=24
        do i=1,ns
        xs(i)=-xs3(i)
        ws(i)=ws3(i)
        enddo

        endif

        if( inode .eq. 7 ) then

        ns=24
        do i=1,ns
        xs(i)=-xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 8 ) then

        ns=24
        do i=1,ns
        xs(i)=-xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        return
        end
c
c
c
c
c
        subroutine suppquad3x10(inode,xs,ws,ns) 
        implicit real *8 (a-h,o-z)
        dimension xs(*),ws(*)
c
        dimension xs1(30),ws1(30)
        dimension xs2(30),ws2(30)
        dimension xs3(30),ws3(30)
        dimension xs4(30),ws4(30)
        dimension xs5(30),ws5(30)
c
c
c       This subroutine returns to the user special-purpose
c       quadratures. The quadrature number k (k=1,2,...,10) integrates
c       functions of the form
c       
c       f(x)=phi(x)+psi(x)*log(|x-x_k|),   (1)
c       
c       with phi and psi polynomials of order 30, and x_k one of the
c       Gaussian nodes on the interval [-1,1] (in a 10-point quadrature)
c
c       Approximate accuracy of the quadratures:
c
c       smooth, smooth x log - 15 digits ( 34 in extended precision )
c
c       Input parameters: 
c
c       inode - the node number of 10-point Legendre quadrature
c
c       Output parameters:
c
c       xs - the nodes of the quadrature
c       ws - the weights of the quadrature
c       ns - the number of quadrature points
c
c        
c
c
c nsupp = 10; npols = 30; nquad = 30; error = 8.600E-77
        data xs1 /
     $       -9.9932126771659818567225820340132270D-01,
     $       -9.9647285338182897013827062760787106D-01,
     $       -9.9176501388840943909893953492839060D-01,
     $       -9.8611410867900776490956960527854451D-01,
     $       -9.8063956399615895288324541463868266D-01,
     $       -9.7635352474703726149582244285380879D-01,
     $       -9.7406037715616949152876041623233198D-01,
     $       -9.6913859502008828905861489587044723D-01,
     $       -9.5475263008373357705810245588228887D-01,
     $       -9.2985201143986254023223147952187401D-01,
     $       -8.9341081217194919467301301399519237D-01,
     $       -8.4446343888482430442956823152438641D-01,
     $       -7.8229934913320292703887459553055826D-01,
     $       -7.0658616860742578718002588997410190D-01,
     $       -6.1744531818920225307692008526733615D-01,
     $       -5.1549395907199476312632299806372840D-01,
     $       -4.0185948726223654359564551555579143D-01,
     $       -2.7816941593432781309658513241905811D-01,
     $       -1.4651846525259732760535056217319557D-01,
     $       -9.4147210448461785831460260222708749D-03,
     $        1.3029281522582931576004858402852706D-01,
     $        2.6950237720424793255992317014415575D-01,
     $        4.0495980979086460543209493868504346D-01,
     $        5.3336722225084020961069148455794865D-01,
     $        6.5149563511013667163728255388783705D-01,
     $        7.5629716867719447175373546771462880D-01,
     $        8.4501233863169674132519765785112893D-01,
     $        9.1526827498354103865368515930905882D-01,
     $        9.6516451781137753038897092429027705D-01,
     $        9.9335038656148828390893251057969347D-01/
        data ws1 /
     $        1.7402009167913379154261047094882493D-03,
     $        3.8939451504458461164507904304621008D-03,
     $        5.3619880497476078505219754765013020D-03,
     $        5.7484588524631480261313134486484980D-03,
     $        5.0346161259978029441810950517792266D-03,
     $        3.4844800068773310658152723436061472D-03,
     $        1.6881902478606594067613776416324679D-03,
     $        9.4298648290694686710371889937989418D-03,
     $        1.9480088127356156247220695950273063D-02,
     $        3.0496987993197903889176164138398571D-02,
     $        4.2549516731028360068118459935205354D-02,
     $        5.5465645121666622975441787700025154D-02,
     $        6.8919159729145455033188332363035026D-02,
     $        8.2487650517299558219802873364949045D-02,
     $        9.5691425806477123471219779125889317D-02,
     $        1.0802322050574651185053799217865200D-01,
     $        1.1897391812722041417058543146546728D-01,
     $        1.2805620165598838157887874615689977D-01,
     $        1.3482647096715803105906281742799779D-01,
     $        1.3890470637812843334230396674385923D-01,
     $        1.3999172271110456627814733478690475D-01,
     $        1.3788322091292088780275551044468077D-01,
     $        1.3248010768245073750920357597262833D-01,
     $        1.2379467354049827253920561427336654D-01,
     $        1.1195237386563595644277219694575782D-01,
     $        9.7189133545949221406865068014977044D-02,
     $        7.9844295419205278587057054658845053D-02,
     $        6.0349628598437554302610427751204377D-02,
     $        3.9216047840862193835132222594438379D-02,
     $        1.7042060043269177394388829910628403D-02/
c nsupp = 10; npols = 30; nquad = 30; error = 7.315E-77
        data xs2 /
     $       -9.9805161765617914215361847268074696D-01,
     $       -9.8996873370501389072352498564352196D-01,
     $       -9.7634284513730029837243636623970173D-01,
     $       -9.5859015555653136592445839025926334D-01,
     $       -9.3848252002320730270627163409009451D-01,
     $       -9.1793940296367700941904749827522109D-01,
     $       -8.9884214290523860315523458715514173D-01,
     $       -8.8287773635762329142843607214916496D-01,
     $       -8.7140862232345735438986370348964178D-01,
     $       -8.6548059575580356007937853701245193D-01,
     $       -8.5644434040578280710461940198954738D-01,
     $       -8.3110744783800016683768968643832646D-01,
     $       -7.8869567727993756363794311810498130D-01,
     $       -7.2918749356948000149424545366655980D-01,
     $       -6.5286923725289994808542489711791381D-01,
     $       -5.6047820256532739392511466899233481D-01,
     $       -4.5327693020255953625002688202646933D-01,
     $       -3.3307513127367092666020279623265065D-01,
     $       -2.0221154758055420676622192573661667D-01,
     $       -6.3503764675717769253560647764916101D-02,
     $        7.9828380212687279651804336413370554D-02,
     $        2.2426085767882014887180903267717302D-01,
     $        3.6607998700885074803665822163175367D-01,
     $        5.0150821392604338066997745987470494D-01,
     $        6.2683565250793131880387461420420245D-01,
     $        7.3855182353884641417272307984407447D-01,
     $        8.3347211213530697563005001835968270D-01,
     $        9.0885380812145498271295056314513621D-01,
     $        9.6249757095005216764072268929993818D-01,
     $        9.9283815749409112182581635147294106D-01/
        data ws2 /
     $        4.9730001864159436925579261439989686D-03,
     $        1.1049939190343299684392529070241549D-02,
     $        1.5962140053825254745387593623538748D-02,
     $        1.9244424162915932249031913281481314D-02,
     $        2.0647823749763032616401656826757022D-02,
     $        2.0122262941482470710928371192301627D-02,
     $        1.7789078613697784942858915240376535D-02,
     $        1.3913687469891870014875151194517094D-02,
     $        8.9406122841316637063201202464508535D-03,
     $        3.9107178254961143408731145013453293D-03,
     $        1.6834950987446390557966962514451293D-02,
     $        3.3855085266541886295946995105483458D-02,
     $        5.0975947765035033993732671546784591D-02,
     $        6.7995028903507230961591039494313893D-02,
     $        8.4519800139701781609890626543367745D-02,
     $        1.0005218171534765271349369065441344D-01,
     $        1.1404842412248685260471311745080703D-01,
     $        1.2596453421627536753639079052470651D-01,
     $        1.3529174754821151381805324703554303D-01,
     $        1.4158553258928780981637593414787638D-01,
     $        1.4448949743127679394288130924995078D-01,
     $        1.4375440133333195673117814154787951D-01,
     $        1.3925205925157804270509211710479542D-01,
     $        1.3098387149171283722040384186388630D-01,
     $        1.1908380578927195726737701218691089D-01,
     $        1.0381582244063779343511377632799282D-01,
     $        8.5565941301164143154149875461517797D-02,
     $        6.4829471514200634745461531696379424D-02,
     $        4.2195263704257649264744922753743041D-02,
     $        1.8352946010763304921815105468187612D-02/
c nsupp = 10; npols = 30; nquad = 30; error = 6.186E-77
        data xs3 /
     $       -9.9682825895536197830878052219720994D-01,
     $       -9.8353870456726953784857851526377250D-01,
     $       -9.6062626472622965448715369842909714D-01,
     $       -9.2969725755476982080215796480711842D-01,
     $       -8.9288580129618719673272382194136242D-01,
     $       -8.5267905432624547707000542536134802D-01,
     $       -8.1173649317561736440123137169326472D-01,
     $       -7.7271339813567070355460336027804521D-01,
     $       -7.3809717233180367207780053623470151D-01,
     $       -7.1006192148197709167169928183327982D-01,
     $       -6.9033956587309670835371393569553990D-01,
     $       -6.8018572904827639979836756827989255D-01,
     $       -6.6955551889716661514957291010737278D-01,
     $       -6.4053367544609984068964050893529772D-01,
     $       -5.9126258774531109522570445693551555D-01,
     $       -5.2179963669562323925743058162821792D-01,
     $       -4.3321077003532196812285337287888594D-01,
     $       -3.2744121659665509443624905216142644D-01,
     $       -2.0714416708306182957735538657881084D-01,
     $       -7.5547298815424583127972587629007355D-02,
     $        6.3663810743767584102714927795813777D-02,
     $        2.0646515906664235538127278779893807D-01,
     $        3.4862431984068562634455459480292956D-01,
     $        4.8584093040897112287567539826272708D-01,
     $        6.1389378973544235619031808382943335D-01,
     $        7.2878898121377215932094263305231561D-01,
     $        8.2690286014020383625347963663211067D-01,
     $        9.0511386964396371837541567697677571D-01,
     $        9.6091814240117192096376896308953807D-01,
     $        9.9253225627552435341839593715464147D-01/
        data ws3 /
     $        8.1109001680630835544005663839408676D-03,
     $        1.8316250147601405946581023038265932D-02,
     $        2.7238082759433957279429366391251832D-02,
     $        3.4261328732077663501691835302502770D-02,
     $        3.8944015957929198317541325017029059D-02,
     $        4.1023269872304057468513883787329698D-02,
     $        4.0416564511478969217127186653224729D-02,
     $        3.7212630314166216011678222456839640D-02,
     $        3.1655386587772369118093854266128120D-02,
     $        2.4124742969377366727053738873607603D-02,
     $        1.5157393367244665340449857044835914D-02,
     $        6.0866102404662031416007211625858824D-03,
     $        1.9076190244624789924062444262976799D-02,
     $        3.9074627765200079068908791582858534D-02,
     $        5.9461895204767737654814503062347138D-02,
     $        7.9283204672923043650368810249443232D-02,
     $        9.7567408788576201007331256335024205D-02,
     $        1.1352735120829358995498378472348502D-01,
     $        1.2652690572560893081159671680792492D-01,
     $        1.3605059247454727703223607396408842D-01,
     $        1.4169879127925490768450915920201904D-01,
     $        1.4319614951578096892708350797028010D-01,
     $        1.4040297957691806807945668645157257D-01,
     $        1.3332422442257887885472607775224958D-01,
     $        1.2211344372985192539897261281771073D-01,
     $        1.0707078865783182468392103665175889D-01,
     $        8.8634777313571104985619317658518122D-02,
     $        6.7368310225081589494896435778027252D-02,
     $        4.3940899032644431726090675211661991D-02,
     $        1.9134284534029495436260529140511407D-02/
c nsupp = 10; npols = 30; nquad = 30; error = 6.862E-77
        data xs4 /
     $       -9.9563762084051048647749312761996067D-01,
     $       -9.7727270499435589842512141104962673D-01,
     $       -9.4526859070356735126787811343683608D-01,
     $       -9.0132937189355217048223739113943696D-01,
     $       -8.4779129520235727075207129400967197D-01,
     $       -7.8748340066017942846161287645088158D-01,
     $       -7.2357040655902649016082062818265581D-01,
     $       -6.5938292066434970307989376871788849D-01,
     $       -5.9824395524894381333256054692805140D-01,
     $       -5.4330023874002451788381388968087361D-01,
     $       -4.9736624862272543078641919283974689D-01,
     $       -4.6279051622769705442192751751278760D-01,
     $       -4.4137475233892088094061011662614070D-01,
     $       -4.3103366755222125672169209936575819D-01,
     $       -4.0652744755316737500429192105808705D-01,
     $       -3.5844527304263362095317592761535945D-01,
     $       -2.8838503267978680902945889158346529D-01,
     $       -1.9874129753708290406671993170525984D-01,
     $       -9.2591820428375723515407629464879409D-02,
     $        2.6404102298825648671321183098854927D-02,
     $        1.5412747511186623315012972162068978D-01,
     $        2.8614048863679055046797119979031034D-01,
     $        4.1784311014157792060953719880658621D-01,
     $        5.4464169850300445233100880105884664D-01,
     $        6.6212688685201205683777761523628587D-01,
     $        7.6626129828651850002941360250351331D-01,
     $        8.5358532461350228438566966739259384D-01,
     $        9.2146061053366046694150589050463292D-01,
     $        9.6835921168182661104862035876898037D-01,
     $        9.9405454671274652574258451489458830D-01/
        data ws4 /
     $        1.1165706844520317584089898597882810D-02,
     $        2.5409196642513526159703620947982409D-02,
     $        3.8312746702037439752213575938512569D-02,
     $        4.9174029434273723143744583591898347D-02,
     $        5.7427978358148908700291705928512517D-02,
     $        6.2657505989539755308431884212009445D-02,
     $        6.4610469274099636302587912914970815D-02,
     $        6.3207837133412936560256556454846281D-02,
     $        5.8543020508726561114788971474894304D-02,
     $        5.0873059977352766358731139697934058D-02,
     $        4.0601846977584065775371886487833132D-02,
     $        2.8246049214498047363570227346714531D-02,
     $        1.4155768716974270082600837096820230D-02,
     $        1.2818165904125035527523083007186257D-02,
     $        3.6484859157384007915084418627994962D-02,
     $        5.9408852835153969715396046537931593D-02,
     $        8.0311086502543130289406675510632315D-02,
     $        9.8461745037277380554341950103165683D-02,
     $        1.1322529048137438189205469036047830D-01,
     $        1.2407769934182537872801185839262866D-01,
     $        1.3062679233960317895145597748074473D-01,
     $        1.3262974489879207375681502138067624D-01,
     $        1.3000692617035652591435297948391499D-01,
     $        1.2285224453530783772759375747777374D-01,
     $        1.1144185578532556783388685788118755D-01,
     $        9.6246370856632533681991188670395921D-02,
     $        7.7956938564628066276731623349626558D-02,
     $        5.7534490987672251814843735720137671D-02,
     $        3.6230033089148596059276405528709592D-02,
     $        1.5301687739168129154850929796003793D-02/
c nsupp = 10; npols = 30; nquad = 30; error = 8.171E-77
        data xs5 /
     $       -9.9484159179312646908196409705668173D-01,
     $       -9.7303559106090008057816667496915569D-01,
     $       -9.3468025264420679002162153353493669D-01,
     $       -8.8125682344667087678377978504199708D-01,
     $       -8.1488263993478010607937517416844272D-01,
     $       -7.3824585518391037259112355891003848D-01,
     $       -6.5451110618629990756083948946213749D-01,
     $       -5.6719260011775419215159396770020221D-01,
     $       -4.8000200113638238659307290304817181D-01,
     $       -3.9668142914269927086265039399863027D-01,
     $       -3.2083221762250922656665315959256477D-01,
     $       -2.5574918170846752374353468647597666D-01,
     $       -2.0426850710461794487939484489997919D-01,
     $       -1.6863094114374055472342203289813864D-01,
     $       -1.5039026945444987769496845165923605D-01,
     $       -1.3691443952276652835602562251122401D-01,
     $       -1.0327256406919069079123109864415356D-01,
     $       -4.8624963668346824363334212705522948D-02,
     $        2.4832053965740874959240122671154902D-02,
     $        1.1418443379027073950421345249550897D-01,
     $        2.1589019517843835984732687953849098D-01,
     $        3.2591763723904150830188436559839266D-01,
     $        4.3990460717766605143070581825211673D-01,
     $        5.5333122068498641590539692892972796D-01,
     $        6.6169902326117161583393004633388374D-01,
     $        7.6070945933059020681783721665195247D-01,
     $        8.4643456742199184404648016631342173D-01,
     $        9.1547318665667387365707036897523941D-01,
     $        9.6508701091733113021257343956426749D-01,
     $        9.9331851302865096625311170743929693D-01/
        data ws5 /
     $        1.3213607672195186480624460950816807D-02,
     $        3.0271545674841322501976579230612136D-02,
     $        4.6191136661718955430379053336961317D-02,
     $        6.0301828261860421887329810576042943D-02,
     $        7.1996938956312293223534386730478192D-02,
     $        8.0747056392141422631020078528236871D-02,
     $        8.6134179668482343993711773713378874D-02,
     $        8.7881412633848843194066398746540358D-02,
     $        8.5873221236574402559398672270386552D-02,
     $        8.0164918449540224440468203469456446D-02,
     $        7.0981820750101881223940104339181193D-02,
     $        5.8709326119126603000554489705086072D-02,
     $        4.3876302463234644205652997107091426D-02,
     $        2.7160741449065800829244615068180046D-02,
     $        1.0231494183372212785638224679978935D-02,
     $        2.2522684695902549366993591968195432D-02,
     $        4.4450589013492900028509000485536667D-02,
     $        6.4479698341920369877120061042781636D-02,
     $        8.1946870294695899790908505925945095D-02,
     $        9.6165229306724604403097061399564967D-02,
     $        1.0657167226462895168035734726590818D-01,
     $        1.1275329107927534977012990444376638D-01,
     $        1.1446433165222496665644925770782420D-01,
     $        1.1163616147941880448280963207476575D-01,
     $        1.0438015665445215497993534500669716D-01,
     $        9.2983437553479651951575652642154920D-02,
     $        7.7897643427482901254492095972504098D-02,
     $        5.9721326012930961155025980853634126D-02,
     $        3.9177879035247423224275037869018806D-02,
     $        1.7113498615705952990781676889274415D-02/

        
        if( inode .eq. 1 ) then

        ns=30
        do i=1,ns
        xs(i)=xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        if( inode .eq. 2 ) then

        ns=30
        do i=1,ns
        xs(i)=xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 3 ) then

        ns=30
        do i=1,ns
        xs(i)=xs3(i)
        ws(i)=ws3(i)
        enddo

        endif

        if( inode .eq. 4 ) then

        ns=30
        do i=1,ns
        xs(i)=xs4(i)
        ws(i)=ws4(i)
        enddo

        endif

        if( inode .eq. 5 ) then

        ns=30
        do i=1,ns
        xs(i)=xs5(i)
        ws(i)=ws5(i)
        enddo

        endif

        if( inode .eq. 6 ) then

        ns=30
        do i=1,ns
        xs(i)=-xs5(i)
        ws(i)=ws5(i)
        enddo

        endif

        if( inode .eq. 7 ) then

        ns=30
        do i=1,ns
        xs(i)=-xs4(i)
        ws(i)=ws4(i)
        enddo

        endif

        if( inode .eq. 8 ) then

        ns=30
        do i=1,ns
        xs(i)=-xs3(i)
        ws(i)=ws3(i)
        enddo

        endif

        if( inode .eq. 9 ) then

        ns=30
        do i=1,ns
        xs(i)=-xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 10 ) then

        ns=30
        do i=1,ns
        xs(i)=-xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        return
        end
c
c
c
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c
c
c
        subroutine hsuppquad3x1(inode,xs,ws,ns) 
        implicit real *8 (a-h,o-z)
        dimension xs(*),ws(*)
c
        dimension xs1(4),ws1(4)
c
c
c       This subroutine returns to the user special-purpose
c       quadratures. The quadrature number k (k=1) integrates
c       functions of the form
c       
c       f(x)=phi(x)+psi(x)*log(|x-x_k|)+1/(x-x_k),   (1)
c       
c       with phi and psi polynomials of order 3, and x_k one of the
c       Gaussian nodes on the interval [-1,1] (in a 1-point quadrature)
c
c       Approximate accuracy of the quadratures:
c
c       smooth, smooth x log - 15 digits ( 34 in extended precision )
c       hilbert - 14 digits ( 33 in extended precision calculations )
c
c       Input parameters: 
c
c       inode - the node number of 1-point Legendre quadrature
c
c       Output parameters:
c
c       xs - the nodes of the quadrature
c       ws - the weights of the quadrature
c       ns - the number of quadrature points

c nsupp = 1; npols = 3; nquad = 4; error = 1.106E-77
        data xs1 /
     $       -6.5514288448528272429685496786384378D-01,
     $       -7.0643144844294081458869736724466970D-02,
     $        1.6524665583874446660843028994106129D-01,
     $        8.4172052526961965089898869238661827D-01/
        data ws1 /
     $        7.3254990917279088863304134235357016D-01,
     $        2.1034677670101007771846813867125625D-01,
     $        5.8391189422285418262055464142443581D-01,
     $        4.7319141990334485102793587755073779D-01/
        
        if( inode .eq. 1 ) then

        ns=4
        do i=1,ns
        xs(i)=xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        return
        end
c
c
c
c
c
        subroutine hsuppquad3x2(inode,xs,ws,ns) 
        implicit real *8 (a-h,o-z)
        dimension xs(*),ws(*)
c
        dimension xs1(7),ws1(7)
c
c
c       This subroutine returns to the user special-purpose
c       quadratures. The quadrature number k (k=1,2) integrates
c       functions of the form
c       
c       f(x)=phi(x)+psi(x)*log(|x-x_k|)+1/(x-x_k),   (1)
c       
c       with phi and psi polynomials of order 6, and x_k one of the
c       Gaussian nodes on the interval [-1,1] (in a 2-point quadrature)
c
c       Approximate accuracy of the quadratures:
c
c       smooth, smooth x log - 15 digits ( 34 in extended precision )
c       hilbert - 14 digits ( 31 in extended precision calculations )
c
c       Input parameters: 
c
c       inode - the node number of 2-point Legendre quadrature
c
c       Output parameters:
c
c       xs - the nodes of the quadrature
c       ws - the weights of the quadrature
c       ns - the number of quadrature points

c nsupp = 2; npols = 6; nquad = 7; error = 1.463E-76
        data xs1 /
     $       -9.9167614154635846806387845296621766D-01,
     $       -8.1763175305288458302296496553939015D-01,
     $       -6.1476557312510551745355352958765696D-01,
     $       -5.4508129143036885289878414089918350D-01,
     $       -2.5458916461606621831711723707133366D-01,
     $        3.2444799714824894256887523703764060D-01,
     $        8.5085489224896830748764172696658344D-01/
        data ws1 /
     $        6.6008068062175967049330711441466170D-02,
     $        2.3810581146675773309943342719965567D-01,
     $        1.2396769620378221217147544980701988D-01,
     $        1.0871851169336288075219296190446621D-01,
     $        4.7240543767748872053177114600296868D-01,
     $        6.2145846993035576086791978103588338D-01,
     $        3.6933600496607672552787652260854000D-01/

        
        if( inode .eq. 1 ) then

        ns=7
        do i=1,ns
        xs(i)=xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        if( inode .eq. 2 ) then

        ns=7
        do i=1,ns
        xs(i)=-xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        return
        end
c
c
c
c
c
        subroutine hsuppquad3x3(inode,xs,ws,ns) 
        implicit real *8 (a-h,o-z)
        dimension xs(*),ws(*)
c
        dimension xs1(10),ws1(10)
        dimension xs2(10),ws2(10)
c
c
c       This subroutine returns to the user special-purpose
c       quadratures. The quadrature number k (k=1,2,3) integrates
c       functions of the form
c       
c       f(x)=phi(x)+psi(x)*log(|x-x_k|)+1/(x-x_k),   (1)
c       
c       with phi and psi polynomials of order 9, and x_k one of the
c       Gaussian nodes on the interval [-1,1] (in a 3-point quadrature)
c
c       Approximate accuracy of the quadratures:
c
c       smooth, smooth x log - 15 digits ( 34 in extended precision )
c       hilbert - 14 digits ( 31 in extended precision calculations )
c
c       Input parameters: 
c
c       inode - the node number of 3-point Legendre quadrature
c
c       Output parameters:
c
c       xs - the nodes of the quadrature
c       ws - the weights of the quadrature
c       ns - the number of quadrature points

c nsupp = 3; npols = 9; nquad = 10; error = 7.617E-76
        data xs1 /
     $       -9.8482936233961022745268810318690771D-01,
     $       -9.2828257473642644279481324835686162D-01,
     $       -8.4791994125385633763183507468716699D-01,
     $       -7.8645327414817166865827080321564047D-01,
     $       -7.4719623093833472925929574759943607D-01,
     $       -5.5343674232905563524806499150723686D-01,
     $       -1.9937892081387115670608428682011245D-01,
     $        2.3933602438985090469529485740107904D-01,
     $        6.5340061148726905655078832373454888D-01,
     $        9.2994921796651980422773423635215729D-01/
        data ws1 /
     $        3.7429362257795371296156185559576938D-02,
     $        7.3153859126181249734722160291568121D-02,
     $        7.8833122035111283592588371091442050D-02,
     $        3.0827398840321270050043716903733453D-02,
     $        9.8603504961221022958475284510626363D-02,
     $        2.8289159504223871945699347837993981D-01,
     $        4.1249651621586895472040006603340775D-01,
     $        4.4617128827312078891537042851302184D-01,
     $        3.6246766005806850035283565190578799D-01,
     $        1.7712569319007283892241465681089569D-01/
c nsupp = 3; npols = 9; nquad = 10; error = 6.369E-77
        data xs2 /
     $       -9.5761440774068480630839689402231331D-01,
     $       -7.7893362209492296915911889512863196D-01,
     $       -4.9673793887496853065024695686416365D-01,
     $       -2.0881366595061322665158864332027751D-01,
     $       -2.8406941753693261137478201100132140D-02,
     $        2.2157303074998747811715920686028969D-02,
     $        1.6543276381296165632327762261416126D-01,
     $        4.2793775206715954856685683608987878D-01,
     $        7.2549168033752832199556632347022083D-01,
     $        9.4296174384457364880611084011664468D-01/
        data ws2 /
     $        1.0905720792437344128761247476063097D-01,
     $        2.4247459988528104247187513354325057D-01,
     $        3.0467419282017125091466778027493465D-01,
     $        2.5131164795810058831331030409761784D-01,
     $        9.4826174314174508761565053231307154D-02,
     $        6.8057805666143693889371855482131360D-02,
     $        2.1143738371604065641134864907880930D-01,
     $        2.9858986399466055062425675201088059D-01,
     $        2.7628359637419215211647709816478653D-01,
     $        1.4328752734686211520951489935565103D-01/

        
        if( inode .eq. 1 ) then

        ns=10
        do i=1,ns
        xs(i)=xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        if( inode .eq. 2 ) then

        ns=10
        do i=1,ns
        xs(i)=xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 3 ) then

        ns=10
        do i=1,ns
        xs(i)=-xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        return
        end
c
c
c
c
c
        subroutine hsuppquad3x4(inode,xs,ws,ns) 
        implicit real *8 (a-h,o-z)
        dimension xs(*),ws(*)
c
        dimension xs1(13),ws1(13)
        dimension xs2(13),ws2(13)
c
c
c       This subroutine returns to the user special-purpose
c       quadratures. The quadrature number k (k=1,2,...,4) integrates
c       functions of the form
c       
c       f(x)=phi(x)+psi(x)*log(|x-x_k|)+1/(x-x_k),   (1)
c       
c       with phi and psi polynomials of order 12, and x_k one of the
c       Gaussian nodes on the interval [-1,1] (in a 4-point quadrature)
c
c       Approximate accuracy of the quadratures:
c
c       smooth, smooth x log - 15 digits ( 34 in extended precision )
c       hilbert - 13 digits ( 30 in extended precision calculations )
c
c       Input parameters: 
c
c       inode - the node number of 4-point Legendre quadrature
c
c       Output parameters:
c
c       xs - the nodes of the quadrature
c       ws - the weights of the quadrature
c       ns - the number of quadrature points

c nsupp = 4; npols = 12; nquad = 13; error = 2.281E-75
        data xs1 /
     $       -9.8860272092706736340501066349118178D-01,
     $       -9.4780248521776790901573070446754079D-01,
     $       -8.9908838900558116111654231079285360D-01,
     $       -8.6695848473231834668207611013211755D-01,
     $       -8.4861132833669919096137219231980954D-01,
     $       -7.6040999089348718787655072400378331D-01,
     $       -5.9509125013748900411968932911509154D-01,
     $       -3.6562586296387931075360177515116588D-01,
     $       -8.1326400883701061792734077900215979D-02,
     $        2.3653824717689131850341125692770590D-01,
     $        5.4747826322958187501229134055357009D-01,
     $        8.0323317368155224135502249334660042D-01,
     $        9.6125268306890728809160413019935379D-01/
        data ws1 /
     $        2.8246757775138925822381808480728435D-02,
     $        4.9212080610065087105181384302683337D-02,
     $        4.3607199461361807714184159488820458D-02,
     $        1.5551420167332088184073682079630569D-02,
     $        4.4789876224535067338046912427452122D-02,
     $        1.2925156115497589862862051887024996D-01,
     $        1.9903369295529378804220536390064310D-01,
     $        2.5874823063105319820744019178463299D-01,
     $        3.0643432166471398602284724383586088D-01,
     $        3.2229717247061827546089792016498035D-01,
     $        2.9131078941909049717679068690379921D-01,
     $        2.1293725755673317794360701491274269D-01,
     $        9.8579639909088202353723112847775895D-02/
c nsupp = 4; npols = 12; nquad = 13; error = 6.865E-77
        data xs2 /
     $       -9.7219208407711920341262372411494543D-01,
     $       -8.6272913917756641639947912325747587D-01,
     $       -7.0023597056595662878267313028737048D-01,
     $       -5.3210916061668445696154642815547201D-01,
     $       -4.0562155916541767411831647157523027D-01,
     $       -3.4782743926211677820181972098377130D-01,
     $       -3.2050551603051179151749370754035811D-01,
     $       -1.8255926840015032402075038159223414D-01,
     $        6.4250125731334595622159875477262001D-02,
     $        3.6751843141918247396762512932554611D-01,
     $        6.6278772063335488365616122123039512D-01,
     $        8.8713913284157949481096922305120110D-01,
     $        9.9279320232588766104854631765038727D-01/
        data ws2 /
     $        7.0275983292477986136219654761139966D-02,
     $        1.4308814217135170041974338632582432D-01,
     $        1.7373964847040498266013426742432404D-01,
     $        1.5433344493790009525786345925139972D-01,
     $        9.2989240369412828459295957621441672D-02,
     $        2.1272305778004452967419701852463272D-02,
     $        7.1251860585099462314315160773111437D-02,
     $        1.9950774630323876846826082198620866D-01,
     $        2.8520189872591845848004109849167893D-01,
     $        3.1035701850708296388702796591981332D-01,
     $        2.6946379096273118138999604397297181D-01,
     $        1.7107197236327777940151779390451040D-01,
     $        3.7446947533099340158164687715112459D-02/


        if( inode .eq. 1 ) then

        ns=13
        do i=1,ns
        xs(i)=xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        if( inode .eq. 2 ) then

        ns=13
        do i=1,ns
        xs(i)=xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 3 ) then

        ns=13
        do i=1,ns
        xs(i)=-xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 4 ) then

        ns=13
        do i=1,ns
        xs(i)=-xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        return
        end
c
c
c
c
c
        subroutine hsuppquad3x5(inode,xs,ws,ns) 
        implicit real *8 (a-h,o-z)
        dimension xs(*),ws(*)
c
        dimension xs1(16),ws1(16)
        dimension xs2(16),ws2(16)
        dimension xs3(16),ws3(16)
c
c
c       This subroutine returns to the user special-purpose
c       quadratures. The quadrature number k (k=1,2,...,5) integrates
c       functions of the form
c       
c       f(x)=phi(x)+psi(x)*log(|x-x_k|)+1/(x-x_k),   (1)
c       hilbert - 14 digits ( 33 in extended precision calculations )
c       
c       with phi and psi polynomials of order 15, and x_k one of the
c       Gaussian nodes on the interval [-1,1] (in a 5-point quadrature)
c
c       Approximate accuracy of the quadratures:
c
c       smooth, smooth x log - 15 digits ( 34 in extended precision )
c       hilbert - 13 digits ( 30 in extended precision calculations )
c
c       Input parameters: 
c
c       inode - the node number of 5-point Legendre quadrature
c
c       Output parameters:
c
c       xs - the nodes of the quadrature
c       ws - the weights of the quadrature
c       ns - the number of quadrature points

c nsupp = 5; npols = 15; nquad = 16; error = 1.176E-75
        data xs1 /
     $       -9.9847453429260809619146185225790778D-01,
     $       -9.8318904128234145964533082289347151D-01,
     $       -9.5519888201073872555514062796990640D-01,
     $       -9.2681331833921620018233221141255297D-01,
     $       -9.0926959896164181597956399432996599D-01,
     $       -8.9989849933159020570131715028428222D-01,
     $       -8.5212729992877233029950451515226985D-01,
     $       -7.4874220252250481506406407395768654D-01,
     $       -5.8644975340618148701973290969322094D-01,
     $       -3.7037671867753365709305622122764369D-01,
     $       -1.1374404906999832252214006865732850D-01,
     $        1.6331292474084555575851264784154676D-01,
     $        4.3591789452218805720508112037970209D-01,
     $        6.7749404403996129195512505806188054D-01,
     $        8.6322621399860249593678739591609874D-01,
     $        9.7343666438834407253782391878633341D-01/
        data ws1 /
     $        6.1872343527017322106672639520115306D-03,
     $        2.3465762792632812158185099607704057D-02,
     $        3.0335911325059884162487301018511893D-02,
     $        2.4374128244268974454760590045322087D-02,
     $        8.4374422443532849475121559797325695D-03,
     $        2.2579100922882826974440828601165518D-02,
     $        7.4367256201788784790069633038818546D-02,
     $        1.3298491214731988590553872174217939D-01,
     $        1.9073671866542824382043006457566730D-01,
     $        2.3918747030820065755806714449082763D-01,
     $        2.7068526456585978139428606483369789D-01,
     $        2.7923081701372905340015727781633825D-01,
     $        2.6149065364737172993497483595341158D-01,
     $        2.1746862411231823164501454944864496D-01,
     $        1.5066651124148489250549105689314723D-01,
     $        6.7802192214599224137917412002819559D-02/
c nsupp = 5; npols = 15; nquad = 16; error = 1.193E-75
        data xs2 /
     $       -9.8702507678870870781632169588632099D-01,
     $       -9.3458714232702054370340312634175224D-01,
     $       -8.5140944699311377425132735087780060D-01,
     $       -7.5361485242375278014985572733732327D-01,
     $       -6.5939331310931923726306684395748549D-01,
     $       -5.8568752378753983557141400454252807D-01,
     $       -5.4521956107425263060806599022767338D-01,
     $       -5.2640195794137456159928738751079707D-01,
     $       -4.4213711248459076864585861431532939D-01,
     $       -2.8234700983141647573849845353308481D-01,
     $       -6.4180516028993176689571179852060936D-02,
     $        1.8839669702056131093962300589251831D-01,
     $        4.4687802240809002538639000871929048D-01,
     $        6.8136818109430319595940423325875087D-01,
     $        8.6420813396735008242721049582767418D-01,
     $        9.7355866547493201001666033882659200D-01/
        data ws2 /
     $        3.2952139771586218537948239299963459D-02,
     $        7.0140797850869477710089147428238571D-02,
     $        9.3464880427863138260441086985683778D-02,
     $        9.9036449303872661309184852302350113D-02,
     $        8.6533369111216566409926548832198757D-02,
     $        5.8515545686624076874432060883795817D-02,
     $        1.9092703648935168766966729090590639D-02,
     $        4.2368624743969076743626445272632352D-02,
     $        1.2423999762723785858589306717317832D-01,
     $        1.9246279064344527403946813133788435D-01,
     $        2.3983731161505306777124963687430707D-01,
     $        2.6051252581748169141340620202103549D-01,
     $        2.5140583303944131665318920357721354D-01,
     $        2.1290387297300555511828390125773242D-01,
     $        1.4908311662521037391619412263469361D-01,
     $        6.7450041114188477889700625028501709D-02/
c nsupp = 5; npols = 15; nquad = 16; error = 9.054E-77
        data xs3 /
     $       -9.7724311725002900029121806565440350D-01,
     $       -8.8413180345546410970641821390381763D-01,
     $       -7.3238497987654545326844801961776876D-01,
     $       -5.4626316257258241073963631092049632D-01,
     $       -3.5521000879951395826602831430273755D-01,
     $       -1.8850659767714067259814855478724810D-01,
     $       -6.9298990305590962511557215780027789D-02,
     $       -9.1578980569027857476327818118478451D-03,
     $        1.1341154962002792547927603599614043D-02,
     $        8.6748868104973268145973615306134533D-02,
     $        2.2559038318974587815898363697639426D-01,
     $        4.0564426626420241711757427005702121D-01,
     $        5.9836431679105570134045851356705785D-01,
     $        7.7388299435165982279206511069101028D-01,
     $        9.0688298349154624070239323150622622D-01,
     $        9.8245803440247686192361982106098743D-01/
        data ws3 /
     $        5.7934372343573096007873019856334649D-02,
     $        1.2580279668998814489905002774254846D-01,
     $        1.7357360287094635261008135441948198D-01,
     $        1.9367290321519680915095771626166609D-01,
     $        1.8345216209939792348513753096518327D-01,
     $        1.4599647805769566972814451661880993D-01,
     $        9.0407116750640838130772509249605187D-02,
     $        2.8380962758357687183055035672970696D-02,
     $        3.7861854519106602031296473203021860D-02,
     $        1.1008343814696908734746509577217474D-01,
     $        1.6382654939050982057446721336631807D-01,
     $        1.9143916281066308448501316370799339D-01,
     $        1.8892409032230436224307979185458427D-01,
     $        1.5778851889516439468293213286306115D-01,
     $        1.0567246726905427625539724306551178D-01,
     $        4.5183523860431851185277175380734480D-02/


        if( inode .eq. 1 ) then

        ns=16
        do i=1,ns
        xs(i)=xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        if( inode .eq. 2 ) then

        ns=16
        do i=1,ns
        xs(i)=xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 3 ) then

        ns=16
        do i=1,ns
        xs(i)=xs3(i)
        ws(i)=ws3(i)
        enddo

        endif

        if( inode .eq. 4 ) then

        ns=16
        do i=1,ns
        xs(i)=-xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 5 ) then

        ns=16
        do i=1,ns
        xs(i)=-xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        return
        end
c
c
c
c
c
        subroutine hsuppquad3x6(inode,xs,ws,ns) 
        implicit real *8 (a-h,o-z)
        dimension xs(*),ws(*)
c
        dimension xs1(19),ws1(19)
        dimension xs2(19),ws2(19)
        dimension xs3(19),ws3(19)
c
c
c       This subroutine returns to the user special-purpose
c       quadratures. The quadrature number k (k=1,2,...,6) integrates
c       functions of the form
c       
c       f(x)=phi(x)+psi(x)*log(|x-x_k|)+1/(x-x_k),   (1)
c       
c       with phi and psi polynomials of order 18, and x_k one of the
c       Gaussian nodes on the interval [-1,1] (in a 6-point quadrature)
c
c       Approximate accuracy of the quadratures:
c
c       smooth, smooth x log - 15 digits ( 34 in extended precision )
c       hilbert - 13 digits ( 30 in extended precision calculations )
c
c       Input parameters: 
c
c       inode - the node number of 6-point Legendre quadrature
c
c       Output parameters:
c
c       xs - the nodes of the quadrature
c       ws - the weights of the quadrature
c       ns - the number of quadrature points

c nsupp = 6; npols = 18; nquad = 19; error = 3.843E-76
        data xs1 /
     $       -9.9620665117357771959476012973341430D-01,
     $       -9.8194102390098090129021679774161221D-01,
     $       -9.6252091652274252082802674690453530D-01,
     $       -9.4484039087517304587809784234198837D-01,
     $       -9.3435420896665161132839519242664458D-01,
     $       -9.2737360328780162923300154981703195D-01,
     $       -8.8954081971119172693804486459627008D-01,
     $       -8.1286773347414922832666519845241790D-01,
     $       -6.9694946879415425171244198116964399D-01,
     $       -5.4362637738961175200634058871195446D-01,
     $       -3.5795130556247530192651213767189121D-01,
     $       -1.4833083236774731651421785127642529D-01,
     $        7.3970498170697291621963637645708257D-02,
     $        2.9581186606653477956448440585495740D-01,
     $        5.0352436799105964999343774144697620D-01,
     $        6.8449835657484599409238960367255464D-01,
     $        8.2879658460948787726583957577011254D-01,
     $        9.3032560275593197869375737236660006D-01,
     $        9.8680515351940826129224203666376793D-01/
        data ws1 /
     $        9.4923705538993123240931567076790370D-03,
     $        1.8004126562639032166767208960953494D-02,
     $        1.9635468956653553099358769741818057D-02,
     $        1.4597742778574182411605897538730635D-02,
     $        4.7313090876128388708543982961497670D-03,
     $        1.8699603583061198558423420377220094D-02,
     $        5.7078179756962597457594976333709179D-02,
     $        9.6367553205808346765828718476908066D-02,
     $        1.3517802252843983437837885978416827D-01,
     $        1.7062787370820186835316887653844107D-01,
     $        1.9931256501839371166255976443738817D-01,
     $        2.1803432522911055842508301480185687D-01,
     $        2.2435545005912580663744282695160285D-01,
     $        2.1702224376761095170011123437466925D-01,
     $        1.9627323981948582852715968319829339D-01,
     $        1.6399690426471758903951150313345152D-01,
     $        1.2358312631273560869423657197751531D-01,
     $        7.9123103307260767043007054676611252D-02,
     $        3.3886791499706413884814063692833724D-02/
c nsupp = 6; npols = 18; nquad = 19; error = 3.489E-75
        data xs2 /
     $       -9.9319575151599036801839896901811638D-01,
     $       -9.6538787715471654502733667489933298D-01,
     $       -9.1952012029014414711648186943500198D-01,
     $       -8.6102075791531739270900361291583160D-01,
     $       -7.9718608012358830790188890479384114D-01,
     $       -7.3729361003713731820755020820964136D-01,
     $       -6.9090636677908718375671742531569473D-01,
     $       -6.6549938785031601341115032949195240D-01,
     $       -6.5269868434490786848692567764984056D-01,
     $       -5.9220911612457615522485681670270007D-01,
     $       -4.7500066105067586496257302113718213D-01,
     $       -3.0884649229449712371281343181885503D-01,
     $       -1.0529611376803201985391619760281256D-01,
     $        1.2076059054950719025638158234057552D-01,
     $        3.5202813745705053176009379367606421D-01,
     $        5.7015636281566995544358648023844197D-01,
     $        7.5734615409958496249475344542188215D-01,
     $        8.9800811524300549411669208946972753D-01,
     $        9.8029104161623815574032935375545708D-01/
        data ws2 /
     $        1.7308960030803074251324845762633149D-02,
     $        3.7634744078621083844075978125331314D-02,
     $        5.3210080625392004451865681806185513D-02,
     $        6.2579214734108976259868682809186855D-02,
     $        6.3509652333126133874557457195444191D-02,
     $        5.4638020653150661967012148361028985D-02,
     $        3.6680471442680062469721124849953696D-02,
     $        1.1809335588604802210060895787304410D-02,
     $        3.0265081800450695135663339997135414D-02,
     $        8.9826036805742133871984022328858869D-02,
     $        1.4329734879305859652095378503133049D-01,
     $        1.8707870200493070812565203040780695D-01,
     $        2.1752465177933738652310768313726916D-01,
     $        2.3168325316044886891774292904320742D-01,
     $        2.2776621953565186890655834719953520D-01,
     $        2.0549558596412944546174154837421007D-01,
     $        1.6626012263540687863512818659916426D-01,
     $        1.1306621950124113123165831837436580D-01,
     $        5.0366298533115487341322994810048255D-02/
c nsupp = 6; npols = 18; nquad = 19; error = 1.721E-76
        data xs3 /
     $       -9.8694977018741174921846455735460186D-01,
     $       -9.3297587937568046022107864441792724D-01,
     $       -8.4271146719380466457566265410826531D-01,
     $       -7.2690322342124768554811707208987132D-01,
     $       -5.9916510445312659267640301552141101D-01,
     $       -4.7423743558507522975189463482954018D-01,
     $       -3.6622635520754027707197458771962560D-01,
     $       -2.8706249540147036201869180621444890D-01,
     $       -2.4523663322889263105485212721158519D-01,
     $       -2.2990233540262903843254491526494596D-01,
     $       -1.7088650732361589686358755696663771D-01,
     $       -5.8678579536085439985136119462142654D-02,
     $        9.5494871653997356173828858102083718D-02,
     $        2.7635255487780203514190592055450559D-01,
     $        4.6619227232553762123994155117658197D-01,
     $        6.4683033665463733346629324833337952D-01,
     $        8.0159592884716036132330007680765955D-01,
     $        9.1704887411838877830096130632601845D-01,
     $        9.8403199405739144518928926958570696D-01/
        data ws3 /
     $        3.3290610754529694632858670791318558D-02,
     $        7.3589772794398575504435449893086375D-02,
     $        1.0512192725727082504131976524150661D-01,
     $        1.2419608246183097122816184523117545D-01,
     $        1.2879349318649328011164388360892738D-01,
     $        1.1868458244394799796464129565350678D-01,
     $        9.5329932150133405965602375158152633D-02,
     $        6.1503446625686015598953308529560019D-02,
     $        2.0159652453845009772718054858315409D-02,
     $        2.9386211590608866461463724711754347D-02,
     $        8.7073668869827908491529272300682836D-02,
     $        1.3544706559540661102445547839725581D-01,
     $        1.7032532143482034867685043570153536D-01,
     $        1.8840676806472054192320473522583495D-01,
     $        1.8820803571568323730397441717239756D-01,
     $        1.7025995852133591544490215243178182D-01,
     $        1.3701305146302575993875059870903047D-01,
     $        9.2363673226048532361257201009885006D-02,
     $        4.0846745390386502553277335374292627D-02/

      
        if( inode .eq. 1 ) then

        ns=19
        do i=1,ns
        xs(i)=xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        if( inode .eq. 2 ) then

        ns=19
        do i=1,ns
        xs(i)=xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 3 ) then

        ns=19
        do i=1,ns
        xs(i)=xs3(i)
        ws(i)=ws3(i)
        enddo

        endif

        if( inode .eq. 4 ) then

        ns=19
        do i=1,ns
        xs(i)=-xs3(i)
        ws(i)=ws3(i)
        enddo

        endif

        if( inode .eq. 5 ) then

        ns=19
        do i=1,ns
        xs(i)=-xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 6 ) then

        ns=19
        do i=1,ns
        xs(i)=-xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        return
        end
c
c
c
c
c
        subroutine hsuppquad3x8(inode,xs,ws,ns) 
        implicit real *8 (a-h,o-z)
        dimension xs(*),ws(*)
c
        dimension xs1(25),ws1(25)
        dimension xs2(25),ws2(25)
        dimension xs3(25),ws3(25)
        dimension xs4(25),ws4(25)
c
c
c       This subroutine returns to the user special-purpose
c       quadratures. The quadrature number k (k=1,2,...,8) integrates
c       functions of the form
c       
c       f(x)=phi(x)+psi(x)*log(|x-x_k|)+1/(x-x_k),   (1)
c       
c       with phi and psi polynomials of order 24, and x_k one of the
c       Gaussian nodes on the interval [-1,1] (in a 8-point quadrature)
c
c       Approximate accuracy of the quadratures:
c
c       smooth, smooth x log - 15 digits ( 34 in extended precision )
c       hilbert - 13 digits ( 30 in extended precision calculations )
c
c       Input parameters: 
c
c       inode - the node number of 8-point Legendre quadrature
c
c       Output parameters:
c
c       xs - the nodes of the quadrature
c       ws - the weights of the quadrature
c       ns - the number of quadrature points

c nsupp = 8; npols = 24; nquad = 25; error = 7.324E-75
        data xs1 /
     $       -9.9839322437284931953761860660999458D-01,
     $       -9.9214442677719341355554085086962061D-01,
     $       -9.8296711856612136408424215274604005D-01,
     $       -9.7332448452627653111318381256284668D-01,
     $       -9.6548991133815163668898885219771774D-01,
     $       -9.6107594011256170762769130863852505D-01,
     $       -9.5799592782879236670896563296446172D-01,
     $       -9.4079425100881427092635621560486383D-01,
     $       -9.0547524309954262737871366470201907D-01,
     $       -8.5073829011397147683806832059296323D-01,
     $       -7.7549971956602419792271379760861531D-01,
     $       -6.7937216192440418794337191091108194D-01,
     $       -5.6294752058737143877995534597220867D-01,
     $       -4.2793217414170156031967116575327894D-01,
     $       -2.7717079664157894830184045486725843D-01,
     $       -1.1457853012474499387612712318526795D-01,
     $        5.5005961548121356998422553373036333D-02,
     $        2.2603503625367510082538556491567534D-01,
     $        3.9252156457536036573105775966678820D-01,
     $        5.4835015792223095986936080895647398D-01,
     $        6.8761982861729816232510071884124113D-01,
     $        8.0502016002328879685582978686722383D-01,
     $        8.9627888003681189197760781780409875D-01,
     $        9.5878484852840087546086071179473860D-01,
     $        9.9236892936949747576149912531242070D-01/
        data ws1 /
     $        4.0484049577000822569271395073312001D-03,
     $        8.1101461921118065534827190916186848D-03,
     $        9.8214736880185161362845619127628123D-03,
     $        9.0709914528288490005294085070952600D-03,
     $        6.2252072181438935489046179208720662D-03,
     $        1.9311143204760392265583946617853011D-03,
     $        8.4759237683393282966722503238820254D-03,
     $        2.6056921289129623023211466539193940D-02,
     $        4.4809633879556830230451642299321924D-02,
     $        6.4852806771427561253992587626465470D-02,
     $        8.5693475669728354844846994308505733D-02,
     $        1.0646515775906831173342840778333216D-01,
     $        1.2610008310322041993938540239234226D-01,
     $        1.4345533948719349555611390705471382D-01,
     $        1.5741241603556017379641351452273382D-01,
     $        1.6696206695320999957937013952276769D-01,
     $        1.7127778521097296992125140963516259D-01,
     $        1.6977729444484763243414284302938265D-01,
     $        1.6217081633025998475237488046291386D-01,
     $        1.4849667468600202025286990023447838D-01,
     $        1.2915039460333773179941296755342902D-01,
     $        1.0492820106994587506971030785358443D-01,
     $        7.7138982068946001239295540684139224D-02,
     $        4.7840472792655738826645725626102842D-02,
     $        1.9728216247318760727723270946082839D-02/
c nsupp = 8; npols = 24; nquad = 25; error = 2.765E-75
        data xs2 /
     $       -9.9651340199093594451428533657013208D-01,
     $       -9.8209904665932583165969280600223720D-01,
     $       -9.5801004055709170406530856969251282D-01,
     $       -9.2712536547336702019241158005421899D-01,
     $       -8.9306958052034277968559859052556560D-01,
     $       -8.5975362553904037769342117742255738D-01,
     $       -8.3092609524941585464084889683339316D-01,
     $       -8.0978280891244992500229835178425875D-01,
     $       -7.9855038583990446528232297549929735D-01,
     $       -7.9278682824390616129650265701541277D-01,
     $       -7.6481083942128025511021678231744985D-01,
     $       -7.0901074499678247687741723857304048D-01,
     $       -6.2602569458780586372006907120665888D-01,
     $       -5.1728345958199649468100298789165305D-01,
     $       -3.8530716566376198582549942972125761D-01,
     $       -2.3385458268868960267210975890086803D-01,
     $       -6.7892371611048553704260365062473685D-02,
     $        1.0656752800676215692836120835476945D-01,
     $        2.8273564326603439204145405598960273D-01,
     $        4.5338522083694934827499302953249467D-01,
     $        6.1123577922839823234555364219301885D-01,
     $        7.4935212614257162183467313718439718D-01,
     $        8.6153220418469990542412155798400532D-01,
     $        9.4265959454061008327275846620110636D-01,
     $        9.8901052306516265631397686660974311D-01/
        data ws2 /
     $        8.8934443684529511036393954738449926D-03,
     $        1.9647177881259899565866605192798751D-02,
     $        2.8043802591503873694699498724177935D-02,
     $        3.3113684434131902269188007850002150D-02,
     $        3.4338462766191418615394501763771127D-02,
     $        3.1661973250124699520326608069640470D-02,
     $        2.5452755489996031067779738129276073D-02,
     $        1.6369988477908352316333848430904027D-02,
     $        5.1424256015597077859785529417351259D-03,
     $        1.3872152877526485924325004845814185D-02,
     $        4.1949583379416207903291076405591384D-02,
     $        6.9551943982576876175415852030801518D-02,
     $        9.6185350051942941081001364374924878D-02,
     $        1.2088091561866252730046045854664411D-01,
     $        1.4244487287296553734756706375406960D-01,
     $        1.5962970658504804759469782035395817D-01,
     $        1.7128818828393165553861746763521908D-01,
     $        1.7649429223333749668439978773913794D-01,
     $        1.7463102065567342094141781969712019D-01,
     $        1.6544800680737262996337121275718684D-01,
     $        1.4909072142587696775626032508680041D-01,
     $        1.2610237635491112678355073803399486D-01,
     $        9.7400032078309773862496514288372564D-02,
     $        6.4229064454706380481599930882000721D-02,
     $        2.8138057476613088722320806992212903D-02/
c nsupp = 8; npols = 24; nquad = 25; error = 8.942E-77
        data xs3 /
     $       -9.9419761633498042097510924207521331D-01,
     $       -9.6999616298792630440930326921162359D-01,
     $       -9.2871130277257262915768879358648578D-01,
     $       -8.7395166724514033295010342694280378D-01,
     $       -8.1044021926495086316236790969147290D-01,
     $       -7.4354975012896929407689103391502409D-01,
     $       -6.7880114943805927402859766990468894D-01,
     $       -6.2134536864224034543765105101567084D-01,
     $       -5.7544218485942964762500807000626507D-01,
     $       -5.4398016325410785199360211662187578D-01,
     $       -5.2811611925620151053452203943184150D-01,
     $       -5.2046254219829841846374822997864859D-01,
     $       -4.8433259560781046550865636717664985D-01,
     $       -4.1369345877445623355566077742151485D-01,
     $       -3.1183412171411573804074740164494217D-01,
     $       -1.8350676780592963448767370204169486D-01,
     $       -3.4753615038274622174966518588649888D-02,
     $        1.2735045468858737774708460668998455D-01,
     $        2.9501828943577291656104178602263128D-01,
     $        4.6012060070082734190090997167731314D-01,
     $        6.1458697050697333121995162305648093D-01,
     $        7.5081490270436601625425460285523720D-01,
     $        8.6206266110230948427356526968944130D-01,
     $        9.4280317669126760799790768218823178D-01,
     $        9.8903017014625742165851144264672812D-01/
        data ws3 /
     $        1.4825307817742125666248098284397798D-02,
     $        3.3230024073042241906991005316980787D-02,
     $        4.8731219220505596659331581688309383D-02,
     $        5.9993122176814139545140116431311363D-02,
     $        6.6125885619773170886133859396475788D-02,
     $        6.6726248371774769454667686067040589D-02,
     $        6.1903729707932096130538753868156871D-02,
     $        5.2289351151695392307959887783673370D-02,
     $        3.9028219753712184927562862528951855D-02,
     $        2.3606348355359246237405892007441739D-02,
     $        7.1653792010632167276245835962901770D-03,
     $        1.8027449775097523463193765114088028D-02,
     $        5.3806707955453495636349369612145671D-02,
     $        8.6923233020941833631951822281635099D-02,
     $        1.1600031303461341942572504044674210D-01,
     $        1.3964304878190460150888219781775189D-01,
     $        1.5667873876507263595976003656096205D-01,
     $        1.6622532737382096982603409057153714D-01,
     $        1.6774872185618810072365597050514286D-01,
     $        1.6110395468776305992334540906801766D-01,
     $        1.4655509902753835856169631524847968D-01,
     $        1.2477120254473597959218496806783020D-01,
     $        9.6798142712065801438757832463742790D-02,
     $        6.4010154857320305481345820312626309D-02,
     $        2.8083070158069734377513034960268808D-02/
c nsupp = 8; npols = 24; nquad = 25; error = 2.495E-76
        data xs4 /
     $       -9.9200427448164698920277234817529613D-01,
     $       -9.5847582451744854445494240675997841D-01,
     $       -9.0057590733560421924099244893824428D-01,
     $       -8.2225186506744934968618015488368859D-01,
     $       -7.2882530400653865538282001568728360D-01,
     $       -6.2658797512132034563345520514302335D-01,
     $       -5.2234464349834990714268749088165387D-01,
     $       -4.2293319953122472814458557740319077D-01,
     $       -3.3476269982527158267276978064670136D-01,
     $       -2.6340873310996437768600533010701565D-01,
     $       -2.1330185465467786800339118185178203D-01,
     $       -1.8746477396789676548812288639434889D-01,
     $       -1.7833847502809717268810820457666392D-01,
     $       -1.4372610692366760258525303550789222D-01,
     $       -7.6535631928286313204637252135000956D-02,
     $        1.9170911075151832193214815764627103D-02,
     $        1.3763291476638876731788663735518601D-01,
     $        2.7173036335462879238087542005166730D-01,
     $        4.1341872954672587784179310152245094D-01,
     $        5.5423122479569202186134611080185394D-01,
     $        6.8582662012251297830608333023786466D-01,
     $        8.0057381093208777610479408092677083D-01,
     $        8.9218943475597934834111321444727829D-01,
     $        9.5645555270542970662551913172230668D-01,
     $        9.9182408551305757642769486741870604D-01/
        data ws4 /
     $        2.0450164242249735032771681222335428D-02,
     $        4.6239012186338664019943709925929258D-02,
     $        6.8896874073724452066967252488338028D-02,
     $        8.6857568246790761934445456009054415D-02,
     $        9.8939222074460614845577345232697311D-02,
     $        1.0439321075957024427381858305603162D-01,
     $        1.0294600877549693261907294006919749D-01,
     $        9.4801879333610539916739950428222935D-02,
     $        8.0604560188518854879518598595645220D-02,
     $        6.1361746439005608652408844015476776D-02,
     $        3.8312415898033346013866013848388450D-02,
     $        1.2401887524835784075920678897696213D-02,
     $        1.7091941061299033861615941679025001D-02,
     $        5.1420203119875105414657805696240373D-02,
     $        8.2276568628938058198341987868256582D-02,
     $        1.0817076553153948851495066461452411D-01,
     $        1.2755924566678606221933335718359550D-01,
     $        1.3928647428101726427632039651161008D-01,
     $        1.4266996916108043534349696106080924D-01,
     $        1.3755510804575761802747385399558125D-01,
     $        1.2435332444580939234754602640699101D-01,
     $        1.0408172064783532674934190999737195D-01,
     $        7.8434177487216122352346064241609884D-02,
     $        4.9843752148187170062352825658962213D-02,
     $        2.1052200032023384301171151296409669D-02/


        if( inode .eq. 1 ) then

        ns=25
        do i=1,ns
        xs(i)=xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        if( inode .eq. 2 ) then

        ns=25
        do i=1,ns
        xs(i)=xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 3 ) then

        ns=25
        do i=1,ns
        xs(i)=xs3(i)
        ws(i)=ws3(i)
        enddo

        endif

        if( inode .eq. 4 ) then

        ns=25
        do i=1,ns
        xs(i)=xs4(i)
        ws(i)=ws4(i)
        enddo

        endif

        if( inode .eq. 5 ) then

        ns=25
        do i=1,ns
        xs(i)=-xs4(i)
        ws(i)=ws4(i)
        enddo

        endif

        if( inode .eq. 6 ) then

        ns=25
        do i=1,ns
        xs(i)=-xs3(i)
        ws(i)=ws3(i)
        enddo

        endif

        if( inode .eq. 7 ) then

        ns=25
        do i=1,ns
        xs(i)=-xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 8 ) then

        ns=25
        do i=1,ns
        xs(i)=-xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        return
        end
c
c
c
c
c
        subroutine hsuppquad3x10(inode,xs,ws,ns) 
        implicit real *8 (a-h,o-z)
        dimension xs(*),ws(*)
c
        dimension xs1(31),ws1(31)
        dimension xs2(31),ws2(31)
        dimension xs3(31),ws3(31)
        dimension xs4(31),ws4(31)
        dimension xs5(31),ws5(31)
c
c
c       This subroutine returns to the user special-purpose
c       quadratures. The quadrature number k (k=1,2,...,10) integrates
c       functions of the form
c       
c       f(x)=phi(x)+psi(x)*log(|x-x_k|)+1/(x-x_k),   (1)
c       
c       with phi and psi polynomials of order 30, and x_k one of the
c       Gaussian nodes on the interval [-1,1] (in a 10-point quadrature)
c
c       Approximate accuracy of the quadratures:
c
c       smooth, smooth x log - 15 digits ( 34 in extended precision )
c       hilbert - 13 digits ( 30 in extended precision calculations )
c
c       Input parameters: 
c
c       inode - the node number of 10-point Legendre quadrature
c
c       Output parameters:
c
c       xs - the nodes of the quadrature
c       ws - the weights of the quadrature
c       ns - the number of quadrature points

c nsupp = 10; npols = 30; nquad = 31; error = 3.939E-75
        data xs1 /
     $       -9.9922991898082307661056656513119711D-01,
     $       -9.9614902658748601521370013488179854D-01,
     $       -9.9134794751433618704932495114659975D-01,
     $       -9.8581097434946214331260934215371414D-01,
     $       -9.8056738755984104952313482373301382D-01,
     $       -9.7652108329937290511326897427248727D-01,
     $       -9.7429839780470706301435428891893352D-01,
     $       -9.7277855011951233846056585025190190D-01,
     $       -9.6430762346798464890884291221529680D-01,
     $       -9.4679135953220637906519557351172328D-01,
     $       -9.1927651286571278700120726894877618D-01,
     $       -8.8067573631569838151435970969337720D-01,
     $       -8.3000200921457598748878515205265339D-01,
     $       -7.6653831213630234101685098555124428D-01,
     $       -6.8994994766036348315638000154780934D-01,
     $       -6.0035430124380951678430586557517802D-01,
     $       -4.9835875306023440618824388501864034D-01,
     $       -3.8507237378466405676020494389352641D-01,
     $       -2.6209416370751537271666475839658697D-01,
     $       -1.3147957277936174354631925716628635D-01,
     $        4.3129673860809279083234703099564688D-03,
     $        1.4249332780884261367199364012104859D-01,
     $        2.8002602831818510057724840564966711D-01,
     $        4.1372832158729405765575884502280375D-01,
     $        5.4037621523472760196314560773064620D-01,
     $        6.5681429486892393524895894099703508D-01,
     $        7.6006503829826979815907443596968183D-01,
     $        8.4743332265403678709087998331286704D-01,
     $        9.1660206696229263395239611584240045D-01,
     $        9.6571576958255310568122195591486329D-01,
     $        9.9345591861008350941791842776416240D-01/
        data ws1 /
     $        1.9515323294425699700821678913754924D-03,
     $        4.0902852141447943970552765206893234D-03,
     $        5.3436397739705924295787313779164325D-03,
     $        5.5557355952558554669871697351360411D-03,
     $        4.7754883710991580524489701361624033D-03,
     $        3.1633183847009403253099864955965355D-03,
     $        9.6796616935696557178168053193736132D-04,
     $        4.1648935746706859497588462411464640D-03,
     $        1.2859610181030214699918598699770603D-02,
     $        2.2336664175603274103940637115154464D-02,
     $        3.2878199595714864855984933612894062D-02,
     $        4.4490657504930157119913613340667828D-02,
     $        5.6978132406272689927686994913943642D-02,
     $        7.0006182138616881175381051338897962D-02,
     $        8.3151602092269997825829984663229924D-02,
     $        9.5938649811018006943295003315508773D-02,
     $        1.0786740166788780669052154173690655D-01,
     $        1.1843829487236272486237005666537028D-01,
     $        1.2717465403232019071504906853317838D-01,
     $        1.3364359458192221465909653359841027D-01,
     $        1.3747501719547002748468308497564412D-01,
     $        1.3837814645105461456950690079220830D-01,
     $        1.3615501972856022633295658514976932D-01,
     $        1.3071039402819514238048107726208906D-01,
     $        1.2205765864795458713617985411644390D-01,
     $        1.1032049533557821768548737914290297D-01,
     $        9.5730201913237118933261253447963541D-02,
     $        7.8618791811917698394781292194832498D-02,
     $        5.9408272562523480392533379393494688D-02,
     $        3.8597720713665720208867337221860859D-02,
     $        1.6771779139252580739271009838897971D-02/
c nsupp = 10; npols = 30; nquad = 31; error = 8.602E-75
        data xs2 /
     $       -9.9804078612329300166757535062132544D-01,
     $       -9.8992251891012357984190624723587623D-01,
     $       -9.7626824944628936354630887735918036D-01,
     $       -9.5852861592406955828677110972469997D-01,
     $       -9.3849254645231604625885785790650295D-01,
     $       -9.1807457447469917941674224424134176D-01,
     $       -8.9913464816502389978596231896533701D-01,
     $       -8.8333285793627546606332959261657370D-01,
     $       -8.7201888197124240536399632514256358D-01,
     $       -8.6607409420340503807102376143613490D-01,
     $       -8.6264682195515094314942920956525265D-01,
     $       -8.4500194617854539740114155096805624D-01,
     $       -8.0978967020270202297099156077670771D-01,
     $       -7.5726646820894817528780221922375763D-01,
     $       -6.8793094796662991092502669050505882D-01,
     $       -6.0262666651897450188292504109730533D-01,
     $       -5.0261337334957135107176158466274674D-01,
     $       -3.8960075393550842448265495323337713D-01,
     $       -2.6574315932391300513462701182726687D-01,
     $       -1.3359924323147291092206695648055889D-01,
     $        3.9371613375212660847077394303386149D-03,
     $        1.4372743100406026124811591883894024D-01,
     $        2.8249148280114100789443315706201680D-01,
     $        4.1691524300988965941398529058835320D-01,
     $        5.4375392152171628761681936557731109D-01,
     $        6.5992487592290358912109016139715784D-01,
     $        7.6258765899934241151643551507560424D-01,
     $        8.4921311286989151221345970506431160D-01,
     $        9.1764589939257605684818025156150466D-01,
     $        9.6616428017835087295688010416809495D-01,
     $        9.9354352006701892263930456528522896D-01/
        data ws2 /
     $        4.9994589385729105516818977004623511D-03,
     $        1.1088287315175377352716265166552620D-02,
     $        1.5974482852565199489321335137615758D-02,
     $        1.9203061513364808055955075336531378D-02,
     $        2.0546982019603436817153408886892444D-02,
     $        1.9976542144852667476502257016770675D-02,
     $        1.7624631082705254335317325058771997D-02,
     $        1.3749382252828891787618693586973667D-02,
     $        8.6558603060610810458675023665188947D-03,
     $        2.6454734292673850775002111133338392D-03,
     $        8.7698438246007969554423296590437510D-03,
     $        2.6457608862914326641638366622831241D-02,
     $        4.3926716359768950056135415724109932D-02,
     $        6.1038272078680087497059022040388461D-02,
     $        7.7493388062753279614868745155243276D-02,
     $        9.2905780678297025201448887191702613D-02,
     $        1.0683575968676268215715986443493029D-01,
     $        1.1882973243162350615447756217215443D-01,
     $        1.2845784453975114469569009823193135D-01,
     $        1.3534615575003372581771398917194947D-01,
     $        1.3920180598399970509855316513080857D-01,
     $        1.3983024116904365853591406471251592D-01,
     $        1.3714377998838842138117526107147587D-01,
     $        1.3116138833679645458973762686952581D-01,
     $        1.2200086599686872126181648696740562D-01,
     $        1.0986649532546827325947914921860946D-01,
     $        9.5036512172937341840545728269302934D-02,
     $        7.7854179773147991465751175781170342D-02,
     $        5.8723454514798944404826342726052192D-02,
     $        3.8107565801703623638116383204343486D-02,
     $        1.6548446806664327742816364274081342D-02/
c nsupp = 10; npols = 30; nquad = 31; error = 9.086E-75
        data xs3 /
     $       -9.9683635837563880949063227728637450D-01,
     $       -9.8358095572165677653774508421225315D-01,
     $       -9.6072816408664255768725594475855962D-01,
     $       -9.2988107181358794141024088824209268D-01,
     $       -8.9316896982297847702889197947276103D-01,
     $       -8.5307279982328001705040170256450362D-01,
     $       -8.1224488701257812493125259462267841D-01,
     $       -7.7333308163434501195870831087827435D-01,
     $       -7.3881801127942171718423853327287552D-01,
     $       -7.1086999695580891463910467582813105D-01,
     $       -6.9123424035764581150726610289278077D-01,
     $       -6.8107194105321274727181539979338212D-01,
     $       -6.7639021249889759403905779527403322D-01,
     $       -6.5507015221071998886189031901546888D-01,
     $       -6.1366775413412249759263873570995014D-01,
     $       -5.5499567028259782224196567378890912D-01,
     $       -4.8309156290978172450517529865451658D-01,
     $       -3.9993137365922996602612327326197095D-01,
     $       -3.0264225508085059817573541767531923D-01,
     $       -1.8937261964383318435963554551341358D-01,
     $       -6.2648735857336764894489655398669856D-02,
     $        7.3200121049578894867586929827604329D-02,
     $        2.1357853810447917898630188085380442D-01,
     $        3.5391061627619401508711259954621035D-01,
     $        4.8970254212629244173558980908236430D-01,
     $        6.1662425945454596296641238413416511D-01,
     $        7.3062012531736357791988730638064931D-01,
     $        8.2803147562324887185936058510239226D-01,
     $        9.0571711948256410606425597292018331D-01,
     $        9.6116247599941469214230320452669660D-01,
     $        9.9257852103053606229198356316141783D-01/
        data ws3 /
     $        8.0901621458564803062959806668786730D-03,
     $        1.8268947491529127306970669697137792D-02,
     $        2.7166627108945241842596904903992416D-02,
     $        3.4169762524707322224246732001297315D-02,
     $        3.8837917501359608386138221729789996D-02,
     $        4.0909417194065292639241539214466115D-02,
     $        4.0302373114115363065462281176147175D-02,
     $        3.7105398078046765341073926635192237D-02,
     $        3.1561034948401019144853435057581386D-02,
     $        2.4041817003087053758390583551766689D-02,
     $        1.4982231077626439011449689724739876D-02,
     $        4.6962199028036354607364212899891038D-03,
     $        1.0637098750532749550642510536587545D-02,
     $        3.1693535514107079149811294956800327D-02,
     $        5.0646203574372488766521177039529614D-02,
     $        6.5970691254410863754422569588319021D-02,
     $        7.7411737954349062232760546654132251D-02,
     $        8.9545559993067532853741608906405850D-02,
     $        1.0539513851332842356522388813078999D-01,
     $        1.2065624744034963268276148652611230D-01,
     $        1.3204904784893067720481869688362924D-01,
     $        1.3888029787020722688573514748519394D-01,
     $        1.4111314928880497541602342571668959D-01,
     $        1.3880065086109105418297726669831297D-01,
     $        1.3205963488902746830303408105469142D-01,
     $        1.2110578363529843733637255874634904D-01,
     $        1.0627414025596642987706215206314325D-01,
     $        8.8023199116252532087375694113716114D-02,
     $        6.6927431990284591000709072220915247D-02,
     $        4.3663051322271666046661271395056730D-02,
     $        1.9015491836803760615889165634646790D-02/
c nsupp = 10; npols = 30; nquad = 31; error = 3.058E-75
        data xs4 /
     $       -9.9627514038364194782297998582854510D-01,
     $       -9.8045660294589246777099527000581723D-01,
     $       -9.5241655221015058378911895519147896D-01,
     $       -9.1309021517959061583939591863218966D-01,
     $       -8.6408342148516062105989955753866643D-01,
     $       -8.0763482793020760451107844603620826D-01,
     $       -7.4647580935509608621992558193445366D-01,
     $       -6.8364851798008159504402810900237445D-01,
     $       -6.2231638932000593536502750873174513D-01,
     $       -5.6558150708390035664219167706899626D-01,
     $       -5.1631591645173689807362149311150988D-01,
     $       -4.7701239095781463551372854819733491D-01,
     $       -4.4966338135339352414493385577222567D-01,
     $       -4.3562002003327894594478144367853658D-01,
     $       -4.3018282968120851422703028186092443D-01,
     $       -4.0788164761789588725886695485355217D-01,
     $       -3.6377128183877268554336239655729291D-01,
     $       -2.9896823204003908077532306090801693D-01,
     $       -2.1521959128434555158544383347427674D-01,
     $       -1.1494181467201601681182921625436394D-01,
     $       -1.1923651223724190282220440630436139D-03,
     $        1.2241415382267782295309262801789685D-01,
     $        2.5183002326113846969914323549331457D-01,
     $        3.8272388492008546692073652225884712D-01,
     $        5.1064427624111316628026339078863880D-01,
     $        6.3118859811917026599918692071305395D-01,
     $        7.4017040406589753919970818522542155D-01,
     $        8.3377861818474897197745024420564317D-01,
     $        9.0872278788236751582516258520341909D-01,
     $        9.6235947049480170209263428419523228D-01,
     $        9.9280290947568355464958244910767713D-01/
        data ws4 /
     $        9.5506787952264826897100246817976812D-03,
     $        2.2032138243880266985734319122192465D-02,
     $        3.3893868014855816232110711567099354D-02,
     $        4.4490402200342128584116680114513794D-02,
     $        5.3147579378001461388443095962511375D-02,
     $        5.9291271841634745379608964190404535D-02,
     $        6.2516552566084080269941485987248391D-02,
     $        6.2607731987672546119629065955049237D-02,
     $        5.9536687680918545804672042175589341D-02,
     $        5.3451900414634548936463683777273093D-02,
     $        4.4661742076935046330891840321743973D-02,
     $        3.3611730514653156011920245783094339D-02,
     $        2.0828993779453355836181619821389186D-02,
     $        6.6505860420586597048145671673543356D-03,
     $        1.0997295620049416516256097919755836D-02,
     $        3.3342869581145340861847833374825921D-02,
     $        5.4692846620714743996345436222530523D-02,
     $        7.4622700381829797536520598909078576D-02,
     $        9.2471339888392596875443249148962145D-02,
     $        1.0757319886293115212806012397580368D-01,
     $        1.1932116329808238847842625068696175D-01,
     $        1.2721473682837625298906402320443479D-01,
     $        1.3089236344091622426924994543574748D-01,
     $        1.3015061670276735760154601474388690D-01,
     $        1.2495359612768481759248277838498507D-01,
     $        1.1543463876861767054769992879446252D-01,
     $        1.0189136046964449140173502497477865D-01,
     $        8.4774546829491880862618503922966187D-02,
     $        6.4671462878786261027207273889684177D-02,
     $        4.2285449565643730790394089589693010D-02,
     $        1.8437950598575036250864480194181703D-02/
c nsupp = 10; npols = 30; nquad = 31; error = 4.142E-76
        data xs5 /
     $       -9.9483576786610948995574366958722319D-01,
     $       -9.7300810566892000280838756444430323D-01,
     $       -9.3462552200703569331040073782392632D-01,
     $       -8.8118474411075160398492712156421173D-01,
     $       -8.1481773308316730846938891431158253D-01,
     $       -7.3822237717934480184461465951357420D-01,
     $       -6.5456637545262722363285302461960261D-01,
     $       -5.6736054653185961949728415360146300D-01,
     $       -4.8030813724769153635284971161251708D-01,
     $       -3.9713967951723091520702402791449144D-01,
     $       -3.2144357723806377778152275697665364D-01,
     $       -2.5650203219342593154611647994432988D-01,
     $       -2.0514080902037910544864754973804430D-01,
     $       -1.6959989375007982747471874916592905D-01,
     $       -1.5145215295727013236811797791277899D-01,
     $       -1.4723395799006952836554138368098097D-01,
     $       -1.3342933899944996126614455719515530D-01,
     $       -9.9476629605610189016134893396037222D-02,
     $       -4.4915864260103308860539357889249386D-02,
     $        2.8317454442160745948954488277717524D-02,
     $        1.1736625249043438834703848169675232D-01,
     $        2.1871442018105488548656004965717479D-01,
     $        3.2834960683630772198964288860420844D-01,
     $        4.4192751757865985884417881810255921D-01,
     $        5.5494565339752826636899912067619166D-01,
     $        6.6292240569609686958600549285019917D-01,
     $        7.6157511455116361251998968233858023D-01,
     $        8.4699025074711988369453235848064338D-01,
     $        9.1577910675990753184403721216205103D-01,
     $        9.6521338328257690107659853498187885D-01,
     $        9.9334269912086109058106825608851219D-01/
        data ws5 /
     $        1.3228175277418109528868799667343986D-02,
     $        3.0298388264885691176565963662031926D-02,
     $        4.6216110246420706531072061530588048D-02,
     $        6.0309045124734945619388526388796183D-02,
     $        7.1973725774332575338930911335029390D-02,
     $        8.0686907425726813585389144527762576D-02,
     $        8.6037424451588819844627813940689662D-02,
     $        8.7754248508652859465288125562132458D-02,
     $        8.5725968129638640928372577127814257D-02,
     $        8.0010125116304759507085822106398547D-02,
     $        7.0832524878914817937778676644662711D-02,
     $        5.8577436674760854729457981301360720D-02,
     $        4.3770002517098377078409931583739204D-02,
     $        2.7055833842820742386490524027905426D-02,
     $        9.0620601884561610640600683151252642D-03,
     $        5.1021336645146209813560998604370057D-03,
     $        2.3375288278782697636002085387295976D-02,
     $        4.4477221641081923179572892638131357D-02,
     $        6.4309334001655809731703926666069913D-02,
     $        8.1677808927097114727277031140338532D-02,
     $        9.5831164779568389329183678592146621D-02,
     $        1.0619371238235233521016949937670876D-01,
     $        1.1234970427517742991236442769616712D-01,
     $        1.1405270007963924740007580971929061D-01,
     $        1.1123365264978212917120144837270679D-01,
     $        1.0400322296704502278064290337879849D-01,
     $        9.2647330893034694352043429806843029D-02,
     $        7.7615889704533659573527073666179318D-02,
     $        5.9505227719194685023332460987307851D-02,
     $        3.9036080675640116010310141478461552D-02,
     $        1.7051550939145250259450163511736714D-02/


        if( inode .eq. 1 ) then

        ns=31
        do i=1,ns
        xs(i)=xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        if( inode .eq. 2 ) then

        ns=31
        do i=1,ns
        xs(i)=xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 3 ) then

        ns=31
        do i=1,ns
        xs(i)=xs3(i)
        ws(i)=ws3(i)
        enddo

        endif

        if( inode .eq. 4 ) then

        ns=31
        do i=1,ns
        xs(i)=xs4(i)
        ws(i)=ws4(i)
        enddo

        endif

        if( inode .eq. 5 ) then

        ns=31
        do i=1,ns
        xs(i)=xs5(i)
        ws(i)=ws5(i)
        enddo

        endif

        if( inode .eq. 6 ) then

        ns=31
        do i=1,ns
        xs(i)=-xs5(i)
        ws(i)=ws5(i)
        enddo

        endif

        if( inode .eq. 7 ) then

        ns=31
        do i=1,ns
        xs(i)=-xs4(i)
        ws(i)=ws4(i)
        enddo

        endif

        if( inode .eq. 8 ) then

        ns=31
        do i=1,ns
        xs(i)=-xs3(i)
        ws(i)=ws3(i)
        enddo

        endif

        if( inode .eq. 9 ) then

        ns=31
        do i=1,ns
        xs(i)=-xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 10 ) then

        ns=31
        do i=1,ns
        xs(i)=-xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        return
        end
c
c
c
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c
c
c
        subroutine hqsuppquad3x1(inode,xs,ws,ns) 
        implicit real *8 (a-h,o-z)
        dimension xs(*),ws(*)
c
        dimension xs1(5),ws1(5)
c
c
c       This subroutine returns to the user special-purpose
c       quadratures. The quadrature number k (k=1) integrates
c       functions of the form
c       
c       f(x)=phi(x)+psi(x)*log(|x-x_k|)+1/(x-x_k)+1/(x-x_k)^2,   (1)
c       
c       with phi and psi polynomials of order 3, and x_k one of the
c       Gaussian nodes on the interval [-1,1] (in a 1-point quadrature)
c
c       Approximate accuracy of the quadratures:
c
c       smooth, smooth x log - 15 digits ( 34 in extended precision )
c       hilbert - 14 digits ( 30 in extended precision calculations )
c       hypersingular - 13 digits ( 27 in extended precision calculations )
c
c       Input parameters: 
c
c       inode - the node number of 1-point Legendre quadrature
c
c       Output parameters:
c
c       xs - the nodes of the quadrature
c       ws - the weights of the quadrature
c       ns - the number of quadrature points

c nsupp = 1; npols = 3; nquad = 5; error = 8.988E-76
        data xs1 /
     $       -6.9278512234613873896685822955516604D-01,
     $       -7.5712952052916341543282827728833885D-02,
     $       -2.8156776643584522263623074461732692D-02,
     $        1.6763362647315094168561411513292209D-01,
     $        7.9953447529660529372764026604452845D-01/
        data ws1 /
     $        6.7215774270084648135387118679154493D-01,
     $        3.9073921596660422546157977032460063D-01,
     $       -7.1348911997446428805965546958396161D-02,
     $        4.9541974155076643027192526460061509D-01,
     $        5.1303221177922929171858932524163550D-01/

        if( inode .eq. 1 ) then

        ns=5
        do i=1,ns
        xs(i)=xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        return
        end
c
c
c
c
c
        subroutine hqsuppquad3x2(inode,xs,ws,ns) 
        implicit real *8 (a-h,o-z)
        dimension xs(*),ws(*)
c
        dimension xs1(8),ws1(8)
c
c
c       This subroutine returns to the user special-purpose
c       quadratures. The quadrature number k (k=1,2) integrates
c       functions of the form
c       
c       f(x)=phi(x)+psi(x)*log(|x-x_k|)+1/(x-x_k)+1/(x-x_k)^2,   (1)
c       
c       with phi and psi polynomials of order 6, and x_k one of the
c       Gaussian nodes on the interval [-1,1] (in a 2-point quadrature)
c
c       Approximate accuracy of the quadratures:
c
c       smooth, smooth x log - 15 digits ( 34 in extended precision )
c       hilbert - 13 digits ( 30 in extended precision calculations )
c       hypersingular - 12 digits ( 27 in extended precision calculations )
c
c       Input parameters: 
c
c       inode - the node number of 2-point Legendre quadrature
c
c       Output parameters:
c
c       xs - the nodes of the quadrature
c       ws - the weights of the quadrature
c       ns - the number of quadrature points

c nsupp = 2; npols = 6; nquad = 8; error = 2.137E-73
        data xs1 /
     $       -9.9905397373424170804822536876552817D-01,
     $       -8.1693038456050624925131402162303015D-01,
     $       -6.0305589095918955073351922331804031D-01,
     $       -5.8481558800474439597849573899279012D-01,
     $       -5.5429550674335715778644091764853198D-01,
     $       -2.8173731353396918487383955213114239D-01,
     $        3.0764009805668890803734485443051887D-01,
     $        8.4701722481305800999233439941404515D-01/
        data ws1 /
     $        6.1028553129936499276195148179762837D-02,
     $        2.5021387757098257966833089520715987D-01,
     $        1.5118363649598867844499850867181262D-01,
     $       -2.0815206103429660988730688052810806D-02,
     $        6.9400746210956826728069109490729133D-02,
     $        4.7428014258218322462755334171382338D-01,
     $        6.3593198639108775471296121496866420D-01,
     $        3.7877626372229409753062246982085877D-01/

        if( inode .eq. 1 ) then

        ns=8
        do i=1,ns
        xs(i)=xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        if( inode .eq. 2 ) then

        ns=8
        do i=1,ns
        xs(i)=-xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        return
        end
c
c
c
c
c
        subroutine hqsuppquad3x3(inode,xs,ws,ns) 
        implicit real *8 (a-h,o-z)
        dimension xs(*),ws(*)
c
        dimension xs1(11),ws1(11)
        dimension xs2(11),ws2(11)
c
c
c       This subroutine returns to the user special-purpose
c       quadratures. The quadrature number k (k=1,2,3) integrates
c       functions of the form
c       
c       f(x)=phi(x)+psi(x)*log(|x-x_k|)+1/(x-x_k)+1/(x-x_k)^2,   (1)
c       
c       with phi and psi polynomials of order 9, and x_k one of the
c       Gaussian nodes on the interval [-1,1] (in a 3-point quadrature)
c
c       Approximate accuracy of the quadratures:
c
c       smooth, smooth x log - 15 digits ( 34 in extended precision )
c       hilbert - 12 digits ( 30 in extended precision calculations )
c       hypersingular - 10 digits ( 27 in extended precision calculations )
c
c       Input parameters: 
c
c       inode - the node number of 3-point Legendre quadrature
c
c       Output parameters:
c
c       xs - the nodes of the quadrature
c       ws - the weights of the quadrature
c       ns - the number of quadrature points

c nsupp = 3; npols = 9; nquad = 11; error = 2.847E-72
        data xs1 /
     $       -9.8633761568623789804516193776613489D-01,
     $       -9.3047172196413879566815877815670964D-01,
     $       -8.4696115626594099112856253143133667D-01,
     $       -7.8169569004365132948115317334853846D-01,
     $       -7.7866456734650134237565747672962523D-01,
     $       -7.4562495550201687748889959508486402D-01,
     $       -5.5244513714666662896812346007181893D-01,
     $       -1.9901963541890810295405069168876694D-01,
     $        2.3933085635284760474521007199090456D-01,
     $        6.5332171528490268996405209303309752D-01,
     $        9.2992466529724127534813231487515572D-01/
        data ws1 /
     $        3.4607348685215145545567218619927538D-02,
     $        7.5212076114101466065541137119041992D-02,
     $        8.2070297140642629200419387052850140D-02,
     $        4.8713158365791576409891831717597398D-02,
     $       -1.8460262046506374050851414396381835D-02,
     $        9.8030685801440165097612935200437389D-02,
     $        2.8221399789302475390592289618325336D-01,
     $        4.1196899734639446813156339453097675D-01,
     $        4.4597063015140222696881923282241626D-01,
     $        3.6249045299799259713880745978419784D-01,
     $        1.7718261755050134558670592136568317D-01/
c nsupp = 3; npols = 9; nquad = 11; error = 5.389E-75
        data xs2 /
     $       -9.4360492703272429839411783339651604D-01,
     $       -7.2820384709485622951566003349898453D-01,
     $       -4.3182093707547367725777010152876337D-01,
     $       -1.6648299330675564293813975322849085D-01,
     $       -1.5822355973609150175229931618948388D-02,
     $       -5.8339888877779278680745432733264744D-03,
     $        3.0812476826298916326236784830648705D-02,
     $        2.0877510622249249995108882248788265D-01,
     $        4.9364405510269085905230312252163291D-01,
     $        7.7495744369959410819772229088325816D-01,
     $        9.5616296694994129416775398904884615D-01/
        data ws2 /
     $        1.4171590578595403133852356778807316D-01,
     $        2.7413357697504830214679809282772489D-01,
     $        2.9898282705847921609669630998991565D-01,
     $        2.1676493244626119599354986727419946D-01,
     $        8.5284812949091298912855253126195326D-02,
     $       -1.5582977945020044090134745301227563D-02,
     $        9.2679250233913344468777226367326385D-02,
     $        2.4813488587932864736734697514698309D-01,
     $        3.0222319578227305496709975419151501D-01,
     $        2.4348559784337634974877062328422053D-01,
     $        1.1217799299129460304971707530507405D-01/

        if( inode .eq. 1 ) then

        ns=11
        do i=1,ns
        xs(i)=xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        if( inode .eq. 2 ) then

        ns=11
        do i=1,ns
        xs(i)=xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 3 ) then

        ns=11
        do i=1,ns
        xs(i)=-xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        return
        end
c
c
c
c
c
        subroutine hqsuppquad3x4(inode,xs,ws,ns) 
        implicit real *8 (a-h,o-z)
        dimension xs(*),ws(*)
c
        dimension xs1(14),ws1(14)
        dimension xs2(14),ws2(14)
c
c
c       This subroutine returns to the user special-purpose
c       quadratures. The quadrature number k (k=1,2,...,4) integrates
c       functions of the form
c       
c       f(x)=phi(x)+psi(x)*log(|x-x_k|)+1/(x-x_k)+1/(x-x_k)^2,   (1)
c       
c       with phi and psi polynomials of order 12, and x_k one of the
c       Gaussian nodes on the interval [-1,1] (in a 4-point quadrature)
c
c       Approximate accuracy of the quadratures:
c
c       smooth, smooth x log - 15 digits ( 34 in extended precision )
c       hilbert - 12 digits ( 30 in extended precision calculations )
c       hypersingular - 10 digits ( 27 in extended precision calculations )
c
c       Input parameters: 
c
c       inode - the node number of 4-point Legendre quadrature
c
c       Output parameters:
c
c       xs - the nodes of the quadrature
c       ws - the weights of the quadrature
c       ns - the number of quadrature points

c nsupp = 4; npols = 12; nquad = 14; error = 7.948E-72
        data xs1 /
     $       -9.8846039498750426679409327670501980D-01,
     $       -9.4716074698336759919009409807668336D-01,
     $       -8.9785274320983099209515138978080500D-01,
     $       -8.6460991662932584093236800260103889D-01,
     $       -8.6305946625803476691491616712216689D-01,
     $       -8.4774567151542992861725917438954113D-01,
     $       -7.5909617814333907352544007531376871D-01,
     $       -5.9408487632524446839488334400260054D-01,
     $       -3.6652674292078004265039878436470766D-01,
     $       -8.3960008341517275954171252803077161D-02,
     $        2.3370882936093466633149700615645701D-01,
     $        5.4548247270008121034260939008885510D-01,
     $        8.0229411748095302190551023872005814D-01,
     $        9.6106136621265497871686955055211104D-01/
        data ws1 /
     $        2.8597413510710759627375672352584316D-02,
     $        4.9807660552543593578640417250850364D-02,
     $        4.4141537556454393405562942395971552D-02,
     $        2.3189669577339068984892226211106701D-02,
     $       -8.2820804088712070317577699471669544D-03,
     $        4.5025123231460254270646843063432214D-02,
     $        1.2961120217337735373653426970913889D-01,
     $        1.9784499338720161110560526609825904D-01,
     $        2.5651060061482092104489565594759618D-01,
     $        3.0545094793550844769140173938820916D-01,
     $        3.2276609567520303351660897920924858D-01,
     $        2.9236927882314988597209435578430801D-01,
     $        2.1390475931399579394265017104115937D-01,
     $        9.9062798057106090154849231495302591D-02/
c nsupp = 4; npols = 12; nquad = 14; error = 3.964E-73
        data xs2 /
     $       -9.7311023762552290332000130164845266D-01,
     $       -8.6713334838088288865018818184713164D-01,
     $       -7.0922591214822340908458280037363262D-01,
     $       -5.4403872828489646437640395833294414D-01,
     $       -4.1484915873244538924347089598741983D-01,
     $       -3.4621537294007025889739331742514133D-01,
     $       -3.4356563109774155767690371792838253D-01,
     $       -3.1912167082943863694646919548441271D-01,
     $       -1.8561561232567769683007100745343514D-01,
     $        5.3427318017901350288225999102981318D-02,
     $        3.4744167515883854526445686040112568D-01,
     $        6.3461781512034279253343078231776828D-01,
     $        8.5619886169776500180214604838878264D-01,
     $        9.7524690614053638047614179460877671D-01/
        data ws2 /
     $        6.7970228421576465842247658443355758D-02,
     $        1.3868977483285999587999784622902678D-01,
     $        1.6942062925887658695884531504024770D-01,
     $        1.5345418931719416887790076228118302D-01,
     $        1.0011207766597636201050598104933969D-01,
     $        4.6874636156034780655746871693960522D-02,
     $       -1.7983257019341916540587910409411083D-02,
     $        6.8243286597515627025402652728897667D-02,
     $        1.9316662100858174523650543727473973D-01,
     $        2.7631656392122665432989572006871472D-01,
     $        3.0117034168923285344888778869053252D-01,
     $        2.6309578517162289086042141940868456D-01,
     $        1.7343287192798375278783040368079427D-01,
     $        6.6036251050660032626400053819934140D-02/

        if( inode .eq. 1 ) then

        ns=14
        do i=1,ns
        xs(i)=xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        if( inode .eq. 2 ) then

        ns=14
        do i=1,ns
        xs(i)=xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 3 ) then

        ns=14
        do i=1,ns
        xs(i)=-xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 4 ) then

        ns=14
        do i=1,ns
        xs(i)=-xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        return
        end
c
c
c
c
c
        subroutine hqsuppquad3x5(inode,xs,ws,ns) 
        implicit real *8 (a-h,o-z)
        dimension xs(*),ws(*)
c
        dimension xs1(17),ws1(17)
        dimension xs2(19),ws2(19)
        dimension xs3(17),ws3(17)
c
c
c       This subroutine returns to the user special-purpose
c       quadratures. The quadrature number k (k=1,2,...,5) integrates
c       functions of the form
c       
c       f(x)=phi(x)+psi(x)*log(|x-x_k|)+1/(x-x_k)+1/(x-x_k)^2,   (1)
c       hilbert - 14 digits ( 33 in extended precision calculations )
c       hypersingular - 11 digits ( 30 in extended precision calculations )
c       
c       with phi and psi polynomials of order 15, and x_k one of the
c       Gaussian nodes on the interval [-1,1] (in a 5-point quadrature)
c
c       Approximate accuracy of the quadratures:
c
c       smooth, smooth x log - 15 digits ( 34 in extended precision )
c       hilbert - 11 digits ( 30 in extended precision calculations )
c       hypersingular - 9 digits ( 27 in extended precision calculations )
c
c       Input parameters: 
c
c       inode - the node number of 5-point Legendre quadrature
c
c       Output parameters:
c
c       xs - the nodes of the quadrature
c       ws - the weights of the quadrature
c       ns - the number of quadrature points

c nsupp = 5; npols = 15; nquad = 17; error = 1.134E-71
        data xs1 /
     $       -9.9405872685246930018889789864865092D-01,
     $       -9.7219985717080222749843670979853262D-01,
     $       -9.4387274265483485883965049858076934D-01,
     $       -9.2019239833485646851258675254839202D-01,
     $       -9.0736379956009238088655180105360269D-01,
     $       -9.0693984641600316054935763137572114D-01,
     $       -8.9816507707991044224299174293266091D-01,
     $       -8.3983291619116641198552211606159746D-01,
     $       -7.2293827221337158814103857151181738D-01,
     $       -5.4983925661350484619620516082299759D-01,
     $       -3.2814685296916660054857601540871951D-01,
     $       -7.1773603284702832481464960223847590D-02,
     $        1.9974796737118681808853297724472078D-01,
     $        4.6318296587022711107666001134228033D-01,
     $        6.9426897511891400503208689273988784D-01,
     $        8.7068958789569063933297207979459504D-01,
     $        9.7492388481488007486179136801565011D-01/
        data ws1 /
     $        1.4800044324556613662939010750962091D-02,
     $        2.7080419595208147396356851659485680D-02,
     $        2.7592062265121508013094258282400140D-02,
     $        1.8153364068617368268857952759409848D-02,
     $        8.4349613451627520155824402672216372D-03,
     $       -3.8279935053563936735778663026410658D-03,
     $        2.8990704465214891687705608701224227D-02,
     $        8.7688391699508274295560631051257760D-02,
     $        1.4575952792741528854169283809612601D-01,
     $        1.9918662837179104773777238606002154D-01,
     $        2.4186679796318639180708419301746860D-01,
     $        2.6759120150434878837454594991548192D-01,
     $        2.7153378570554307802089613645677657D-01,
     $        2.5124184892104428343004705448254072D-01,
     $        2.0716262580479658785416036890333114D-01,
     $        1.4271683829758737963685267838408789D-01,
     $        6.4028791246253992930429507514845296D-02/
c nsupp = 5; npols = 15; nquad = 19; error = 9.443E-72
        data xs2 /
     $       -9.8589129535908427558343307241612155D-01,
     $       -9.2911562575831343841983215214659055D-01,
     $       -8.4011651462601430914833693504984280D-01,
     $       -7.3797730636906244425908449501638641D-01,
     $       -6.4384879342673531900655251239129589D-01,
     $       -5.7567520137333203669074349139964732D-01,
     $       -5.4194127941253030701605258789973563D-01,
     $       -5.3970673066613195055481673753353831D-01,
     $       -5.2965363113259004117148711057282916D-01,
     $       -4.7028833260528995953768408646791433D-01,
     $       -3.4795800547764601803825171014160912D-01,
     $       -1.6426203347314445959807387453168474D-01,
     $        6.7679933385637502575334239140209979D-02,
     $        3.2409950685126889519349450493992102D-01,
     $        5.7520525226793507930941160218214347D-01,
     $        7.9050088056071775135280406214488251D-01,
     $        9.4931319509637336532798737959813033D-01,
     $        9.7314821581902181891362170873125244D-01,
     $        9.9784678126506601353932908488116904D-01/
        data ws2 /
     $        3.5804164010801709426861388028169052D-02,
     $        7.5646906598379617932389175353164480D-02,
     $        9.9090254339424783615784672941032163D-02,
     $        1.0157572102474730887199341777673345D-01,
     $        8.3591286494597457581463333459214281D-02,
     $        5.1110420337444949347935483619724024D-02,
     $        1.7134627119267486853546703231661316D-02,
     $       -2.8621655741295346198883489994829908D-03,
     $        2.8727253341174366261483526206817275D-02,
     $        9.0367737106715656693538207027216690D-02,
     $        1.5415448408042833189754564000112068D-01,
     $        2.1102027907441385006757026576584637D-01,
     $        2.4881842347057854021429504683534020D-01,
     $        2.5896717714782183255753130910174617D-01,
     $        2.3806578273275356133386251511002876D-01,
     $        1.8823064424585685727378441465000357D-01,
     $        1.6226347926431751575542234834758609D-01,
     $       -7.5544089392121399122660031716709387D-02,
     $        3.3837614577527108057540933260787788D-02/
c nsupp = 5; npols = 15; nquad = 17; error = 3.524E-75
        data xs3 /
     $       -9.7707942219958467401478149748320493D-01,
     $       -8.8330699327298603815426778854277164D-01,
     $       -7.3052130374553976216220390675201539D-01,
     $       -5.4322975252731927346193431942767362D-01,
     $       -3.5121642732533428904583288963507326D-01,
     $       -1.8417773475101844692016839173577272D-01,
     $       -6.5583234914242594279940248104029049D-02,
     $       -5.7846143930256995457544819102302352D-03,
     $       -2.4287210897998865323919406281881134D-03,
     $        1.2405015281362409877553842382723553D-02,
     $        8.8288851102619128759251511957953879D-02,
     $        2.2801220405857637672192167101063950D-01,
     $        4.0908566313608037004056433944743318D-01,
     $        6.0259550285184153634708454638843415D-01,
     $        7.7817344695244767266239641969414450D-01,
     $        9.0996589114714711990428223203840097D-01,
     $        9.8334130613554308286371800006533085D-01/
        data ws3 /
     $        5.8350133945381997450476303996573493D-02,
     $        1.2668561013352371779448023252137530D-01,
     $        1.7472716102541893322831045956684500D-01,
     $        1.9480194574251745712854482912172933D-01,
     $        1.8417277603886582658888137265196799D-01,
     $        1.4588012494529636243073623018872320D-01,
     $        8.9360919871751705737738554586871443D-02,
     $        3.4116086100241423181561527859140139D-02,
     $       -7.7596900239271056333525639545110417D-03,
     $        3.7959143797902409713283603553319354D-02,
     $        1.1080493460553924099158378580979944D-01,
     $        1.6482816000543342543522544114961015D-01,
     $        1.9241581500329523316753625174642977D-01,
     $        1.8944323128326811028354364098476515D-01,
     $        1.5728789219692493280912226861194915D-01,
     $        1.0376213108867248328174822223613944D-01,
     $        4.3163624239893846410579839369272678D-02/

        if( inode .eq. 1 ) then

        ns=17
        do i=1,ns
        xs(i)=xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        if( inode .eq. 2 ) then

        ns=19
        do i=1,ns
        xs(i)=xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 3 ) then

        ns=17
        do i=1,ns
        xs(i)=xs3(i)
        ws(i)=ws3(i)
        enddo

        endif

        if( inode .eq. 4 ) then

        ns=19
        do i=1,ns
        xs(i)=-xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 5 ) then

        ns=17
        do i=1,ns
        xs(i)=-xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        return
        end
c
c
c
c
c
        subroutine hqsuppquad3x6(inode,xs,ws,ns) 
        implicit real *8 (a-h,o-z)
        dimension xs(*),ws(*)
c
        dimension xs1(20),ws1(20)
        dimension xs2(20),ws2(20)
        dimension xs3(21),ws3(21)
c
c
c       This subroutine returns to the user special-purpose
c       quadratures. The quadrature number k (k=1,2,...,6) integrates
c       functions of the form
c       
c       f(x)=phi(x)+psi(x)*log(|x-x_k|)+1/(x-x_k)+1/(x-x_k)^2,   (1)
c       
c       with phi and psi polynomials of order 18, and x_k one of the
c       Gaussian nodes on the interval [-1,1] (in a 6-point quadrature)
c
c       Approximate accuracy of the quadratures:
c
c       smooth, smooth x log - 15 digits ( 34 in extended precision )
c       hilbert - 14 digits ( 30 in extended precision calculations )
c       hypersingular - 9 digits ( 27 in extended precision calculations )
c
c       Input parameters: 
c
c       inode - the node number of 6-point Legendre quadrature
c
c       Output parameters:
c
c       xs - the nodes of the quadrature
c       ws - the weights of the quadrature
c       ns - the number of quadrature points

c nsupp = 6; npols = 18; nquad = 20; error = 6.051E-72
        data xs1 /
     $       -9.9622714788168083199126610470771079D-01,
     $       -9.8204158145334475524714711214696632D-01,
     $       -9.6273595573279115696701723887202958D-01,
     $       -9.4516780513984494856781580897576323D-01,
     $       -9.3473436164058181346532269675918270D-01,
     $       -9.3147011079358376477465587330839131D-01,
     $       -9.2882615763603715358098114932727655D-01,
     $       -8.9106592214275513562748433247838544D-01,
     $       -8.1507263951255254263795764464216359D-01,
     $       -7.0020032519684720956748472659805616D-01,
     $       -5.4827546994143969366333233784096307D-01,
     $       -3.6431651307123554684626382699023985D-01,
     $       -1.5665053365963735914055954567842751D-01,
     $        6.3617769533077208367061134793489059D-02,
     $        2.8365227844149915995750558615663863D-01,
     $        4.9032446543811260722349070752156572D-01,
     $        6.7181615508635493516728250933231033D-01,
     $        8.1886441269603554710536164592646461D-01,
     $        9.2495564733041470664852820342058009D-01,
     $        9.8560120034903032459991605114569411D-01/
        data ws1 /
     $        9.4405541591728242883990242821347427D-03,
     $        1.7900653781009366695555667489709060D-02,
     $        1.9515446935159770683971011976572785D-02,
     $        1.4475212607954905148358991618891762D-02,
     $        4.5206592240934897829126835251630605D-03,
     $       -2.6116241224759137718259762339105389D-03,
     $        2.0605163734724868637578090836642607D-02,
     $        5.6589965827685506670043448417387171D-02,
     $        9.5502542764039137008937270921487341D-02,
     $        1.3395277208762231983617416913649236D-01,
     $        1.6906204637646917152073097774829216D-01,
     $        1.9745886893098563700220832395256245D-01,
     $        2.1600462060709895590076467947769211D-01,
     $        2.2236819627842448322097122286489812D-01,
     $        2.1548481443514889198961390601674801D-01,
     $        1.9586699556869936232312560797391673D-01,
     $        1.6556910698556408015103144112661477D-01,
     $        1.2745850424483714002934031171933376D-01,
     $        8.3981605574483280658245001175094412D-02,
     $        3.6853893999302722223864145974277127D-02/
c nsupp = 6; npols = 18; nquad = 20; error = 3.675E-72
        data xs2 /
     $       -9.9385529745350041015085837977387404D-01,
     $       -9.6812842454976657239557803641256600D-01,
     $       -9.2386772240023632934194691238276306D-01,
     $       -8.6542928060522952892176331061484258D-01,
     $       -8.0063935688575906855409247599191581D-01,
     $       -7.3959749573223786821168689200330550D-01,
     $       -6.9232217794755903103980715631272033D-01,
     $       -6.6643856220525577318032200210424780D-01,
     $       -6.5838500419458316642819852405502142D-01,
     $       -6.5642212656190636068949053898878821D-01,
     $       -5.9467387104918826628369774694601942D-01,
     $       -4.7733742354278253000716068713805612D-01,
     $       -3.1101216769683504547014893375487915D-01,
     $       -1.0721390091964389790169109381048466D-01,
     $        1.1916502220432403763451935926609531D-01,
     $        3.5080541692856282774655957673113987D-01,
     $        5.6931898260427747242616637393760879D-01,
     $        7.5686183053770105158441774671900780D-01,
     $        8.9780112607262884147765943688502028D-01,
     $        9.8025067362085579233915215189309545D-01/
        data ws2 /
     $        1.5707698701006136779001595356753346D-02,
     $        3.5456709235518541705337653761363378D-02,
     $        5.2364347023084582991740512123482313D-02,
     $        6.3182779872869778117511225295669375D-02,
     $        6.4670498105582744210904942403954640D-02,
     $        5.5703783988099750207571957550249471D-02,
     $        3.7342080915635465958604624496758394D-02,
     $        1.1678427635190619295558071046799739D-02,
     $       -2.1741064272092050158132903769829243D-02,
     $        5.0724768422651858604945272009484051D-02,
     $        8.9969812408699279420593491639916347D-02,
     $        1.4343617003358544489090938592869522D-01,
     $        1.8728649692397046575832310729029306D-01,
     $        2.1781209886214381219486897847151735D-01,
     $        2.3203618436292423389825912241569680D-01,
     $        2.2815249477387738592998452613707075D-01,
     $        2.0587239310301855699455057460918449D-01,
     $        1.6658206926534043444305693925804061D-01,
     $        1.1329301396491693243934426607171593D-01,
     $        5.0469236673976026317066657903183979D-02/
c nsupp = 6; npols = 18; nquad = 21; error = 4.715E-72
        data xs3 /
     $       -9.9863811523854395946992130468674453D-01,
     $       -9.6560274734720453695625555527809662D-01,
     $       -8.9217341160837127703844359639070874D-01,
     $       -7.8761317086046753183476620719753026D-01,
     $       -6.6472261176312046943734149636272426D-01,
     $       -5.3818355774803786047032505656742035D-01,
     $       -4.2253251627052490450621356509722952D-01,
     $       -3.3015028360473459557966699774201338D-01,
     $       -2.6934534259245962838143937698098886D-01,
     $       -2.4135592195898454493009436371354855D-01,
     $       -2.3962622535592889461822450789350550D-01,
     $       -2.3133027546526803298308844108425892D-01,
     $       -1.8237641396027268436081937284377103D-01,
     $       -8.4121984871264515230328132140772088D-02,
     $        5.8482912701208332250584415190375138D-02,
     $        2.3372572524584555931559151696265573D-01,
     $        4.2498899218111339825851745876509427D-01,
     $        6.1325581749249164421496273314350429D-01,
     $        7.7947099063994283588301824565638270D-01,
     $        9.0668394213619451776641153571795863D-01,
     $        9.8190183138470308635038104973083806D-01/
        data ws3 /
     $        1.0580655238753442529626954778958955D-02,
     $        5.4433012817029917229099297563090899D-02,
     $        9.0876269241984181032225944530654734D-02,
     $        1.1608083493886274316859670646333402D-01,
     $        1.2721881484097737791982960904814890D-01,
     $        1.2340256992718270968431717587266486D-01,
     $        1.0580562942842775167423938868448424D-01,
     $        7.7535116046596018016809222827042323D-02,
     $        4.3668407295732964931439189132161462D-02,
     $        1.3727265267367743179413470005626314D-02,
     $       -2.4125668284323380914212415573887725D-03,
     $        2.3936048189606476668669314325888390D-02,
     $        7.3857492355808607877973626904063628D-02,
     $        1.2184977474545594990707626733992542D-01,
     $        1.6136894124706447349259145409432959D-01,
     $        1.8630452229451174026155381788114088D-01,
     $        1.9301315856322666347428051930104689D-01,
     $        1.8030868244295813324535062594594013D-01,
     $        1.4926559024570112583427640752986105D-01,
     $        1.0296910522309202249831891641720042D-01,
     $        4.6210676478092295465733332911825681D-02/
      
        if( inode .eq. 1 ) then

        ns=20
        do i=1,ns
        xs(i)=xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        if( inode .eq. 2 ) then

        ns=20
        do i=1,ns
        xs(i)=xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 3 ) then

        ns=21
        do i=1,ns
        xs(i)=xs3(i)
        ws(i)=ws3(i)
        enddo

        endif

        if( inode .eq. 4 ) then

        ns=21
        do i=1,ns
        xs(i)=-xs3(i)
        ws(i)=ws3(i)
        enddo

        endif

        if( inode .eq. 5 ) then

        ns=20
        do i=1,ns
        xs(i)=-xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 6 ) then

        ns=20
        do i=1,ns
        xs(i)=-xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        return
        end
c
c
c
c
c
        subroutine hqsuppquad3x8(inode,xs,ws,ns) 
        implicit real *8 (a-h,o-z)
        dimension xs(*),ws(*)
c
        dimension xs1(27),ws1(27)
        dimension xs2(28),ws2(28)
        dimension xs3(26),ws3(26)
        dimension xs4(26),ws4(26)
c
c
c       This subroutine returns to the user special-purpose
c       quadratures. The quadrature number k (k=1,2,...,8) integrates
c       functions of the form
c       
c       f(x)=phi(x)+psi(x)*log(|x-x_k|)+1/(x-x_k)+1/(x-x_k)^2,   (1)
c       
c       with phi and psi polynomials of order 24, and x_k one of the
c       Gaussian nodes on the interval [-1,1] (in a 8-point quadrature)
c
c       Approximate accuracy of the quadratures:
c
c       smooth, smooth x log - 15 digits ( 34 in extended precision )
c       hilbert - 11 digits ( 30 in extended precision calculations )
c       hypersingular - 9 digits ( 27 in extended precision calculations )
c
c       Input parameters: 
c
c       inode - the node number of 8-point Legendre quadrature
c
c       Output parameters:
c
c       xs - the nodes of the quadrature
c       ws - the weights of the quadrature
c       ns - the number of quadrature points

c nsupp = 8; npols = 24; nquad = 27; error = 2.541E-71
        data xs1 /
     $       -9.9842165995172636332252402586305350D-01,
     $       -9.9226000713433135828009426277248309D-01,
     $       -9.8315667702585865889406637312284704D-01,
     $       -9.7353773708283639653172236741676867D-01,
     $       -9.6569117301023998547838702667574907D-01,
     $       -9.6125913982849787370373522500547709D-01,
     $       -9.5967513617833677535319319965022637D-01,
     $       -9.5903490945757762104776621642536584D-01,
     $       -9.4330066096416565260631997723307431D-01,
     $       -9.1211834458761808642855062753706929D-01,
     $       -8.6501260371158379371424144467326165D-01,
     $       -8.0146098024796595995822256342362401D-01,
     $       -7.2039532440499478997694869924047880D-01,
     $       -6.2079778493351957059035265373800696D-01,
     $       -5.0285444239148155667853724468117648D-01,
     $       -3.6853356064804170896947905085369102D-01,
     $       -2.2155477062891417825053541270219470D-01,
     $       -6.7157607207338781575138674583197711D-02,
     $        8.8508847741178136299168711325207122D-02,
     $        2.4031584402814949215410926664843854D-01,
     $        3.8684876993633104198656537605820558D-01,
     $        5.2847722388998026427421836538535008D-01,
     $        6.6200384703720984823723514866821772D-01,
     $        7.8092551019974921420739149628942348D-01,
     $        8.7858353515277015351607962100307858D-01,
     $        9.4962907593029029853973568925626930D-01,
     $        9.9033779909851352223518435457182286D-01/
        data ws1 /
     $        3.9802137291898419407497039251742898D-03,
     $        8.0185185914442968595090634991495742D-03,
     $        9.7715451518927615966602553629471950D-03,
     $        9.0724283192214294322552307520681597D-03,
     $        6.2465255616797235463382320291193381D-03,
     $        1.8751298600553253423821130800925216D-03,
     $       -3.5373509271716174316186545235652185D-03,
     $        1.0919228482320060423239752785029730D-02,
     $        2.3314017642277578198104524458898051D-02,
     $        3.9093344319142311563989417494822216D-02,
     $        5.5196494490478912902044744982628236D-02,
     $        7.2095861858828660682812291271435514D-02,
     $        9.0228352009203537895463343263432252D-02,
     $        1.0894469836478418147439349620000760D-01,
     $        1.2661207508649173802592561004612429D-01,
     $        1.4140621716695146569895409338718972D-01,
     $        1.5167056071654237115425301313915240D-01,
     $        1.5606894493502263109079359789774464D-01,
     $        1.5434583506953006361402731938938011D-01,
     $        1.4906086028900093192337508614779076D-01,
     $        1.4419742349689728134574182840539001D-01,
     $        1.3850224698574182351553919911848940D-01,
     $        1.2740322983152971961546076965705710D-01,
     $        1.0931009514542835492967322196333470D-01,
     $        8.5111395472880523316964041775677257D-02,
     $        5.6357290690617532552789356822161518D-02,
     $        2.4734817660018558790179347669268634D-02/
c nsupp = 8; npols = 24; nquad = 28; error = 1.059E-70
        data xs2 /
     $       -9.9698473426754683413083143344886542D-01,
     $       -9.8440021248928299072804824583655016D-01,
     $       -9.6324305746225743212238907268556483D-01,
     $       -9.3689396014962457046692515127619542D-01,
     $       -9.1041930811796887250778594472637948D-01,
     $       -8.8426831171689904096103507273929088D-01,
     $       -8.5581864412518518478864250492409113D-01,
     $       -8.2910321060662608338888740100960110D-01,
     $       -8.0884170381046040547809417512628872D-01,
     $       -7.9784920840396806648608179569119222D-01,
     $       -7.9711440560223805513775951605474754D-01,
     $       -7.9373414189103478724720203274072846D-01,
     $       -7.7241892864541552848809879853081935D-01,
     $       -7.2423913805140900420579879676802724D-01,
     $       -6.4732737027640097172647102610171749D-01,
     $       -5.4286246569168485444044515879486101D-01,
     $       -4.1364463293512654865879714651256419D-01,
     $       -2.6376522318460316337145305046688579D-01,
     $       -9.8485156204702298263159022236082238D-02,
     $        7.5935618860882502137428609152023209D-02,
     $        2.5249355336893599002372217693342731D-01,
     $        4.2376756005191385649577890078164893D-01,
     $        5.8228862292940603522208959125664531D-01,
     $        7.2092478951799993644797374591821180D-01,
     $        8.3329260075775191469274458243419895D-01,
     $        9.1461437789578438422087050154316094D-01,
     $        9.6526587018717584422989561113266632D-01,
     $        9.9297625202001060260516938104150330D-01/
        data ws2 /
     $        7.7090641159993001149530581107148875D-03,
     $        1.7243831447338808825373746416867855D-02,
     $        2.4516948364775326406843787042394022D-02,
     $        2.7224777140841911634943881445323811D-02,
     $        2.5582960394585581278774225440831764D-02,
     $        2.7492019045471005394504295056866973D-02,
     $        2.8513008622681523399365676435671074D-02,
     $        2.4123399706942483151792077377114284D-02,
     $        1.5897839751722202159690533618344328D-02,
     $        6.1257582524136174166289689937498691D-03,
     $       -1.1480454344569045797401926006759597D-03,
     $        9.5630531461094762443661478345319293D-03,
     $        3.4049594783651595994970623744822700D-02,
     $        6.2566996449010341207584028103703953D-02,
     $        9.1039774274876756858967440163102011D-02,
     $        1.1741988677783034810031175470620574D-01,
     $        1.4033226462665939919626480729464749D-01,
     $        1.5854693320255082673492510050075509D-01,
     $        1.7096557491278058175065905021509446D-01,
     $        1.7670321552179901479512014762830543D-01,
     $        1.7516957197569017546777016466572136D-01,
     $        1.6612715020577001833089125639871695D-01,
     $        1.4971987156443632921493752077442998D-01,
     $        1.2647882476267387305855125782662841D-01,
     $        9.7412918368361806502186797910036125D-02,
     $        6.5151360891480966671150171435677422D-02,
     $        3.7861722541395265836408264844063184D-02,
     $        1.7609724586608368831805408616354855D-02/
c nsupp = 8; npols = 24; nquad = 26; error = 4.115E-70
        data xs3 /
     $       -9.9452719995093031395678641240408005D-01,
     $       -9.7165803877468225861508781956879994D-01,
     $       -9.3247423452231880380329843701227208D-01,
     $       -8.8011664829876929122539219303690112D-01,
     $       -8.1872502594749718954305226533800895D-01,
     $       -7.5308238300602980045627075732205188D-01,
     $       -6.8824809532588070754870410241989033D-01,
     $       -6.2918939229276364955448191340082138D-01,
     $       -5.8042227793222789650182493410813633D-01,
     $       -5.4568216615870531592495341719157228D-01,
     $       -5.2690989168804397155748360570916770D-01,
     $       -5.2682641304863323458499720935773186D-01,
     $       -5.2006611259115249274906164845891419D-01,
     $       -4.8437191925811483403938835490093058D-01,
     $       -4.1449425875030272542873054778313033D-01,
     $       -3.1357774940585109530105995880613122D-01,
     $       -1.8618944050752250358525644119132450D-01,
     $       -3.8192887604944430883041889489692326D-02,
     $        1.2347367030729176288410515024364346D-01,
     $        2.9109385722657589154383282322409060D-01,
     $        4.5653371511288357659023829670276360D-01,
     $        6.1164737080520403747593540427412075D-01,
     $        7.4870275695136988796085123086265387D-01,
     $        8.6079945230736238221218689585025425D-01,
     $        9.4225143901284772400326666147084997D-01,
     $        9.8892130905928856867521611168701650D-01/
        data ws3 /
     $        1.3988087980531933371186806850260516D-02,
     $        3.1449331009545534591736331475095830D-02,
     $        4.6389005032016643429376275279995165D-02,
     $        5.7630278636156905599091226958171370D-02,
     $        6.4349655173096079923044377821520955D-02,
     $        6.6086238174206294685333316257864573D-02,
     $        6.2748434680101880154957754405377571D-02,
     $        5.4610693284505834547399102427887692D-02,
     $        4.2294946578441003721293783650657780D-02,
     $        2.6675442441467992570980349516872030D-02,
     $        7.8285388277120131725762541719401063D-02,
     $       -7.0304816272650982828639269543960110D-02,
     $        1.7690609115652411402798255993119304D-02,
     $        5.3190211569902525700566375145553150D-02,
     $        8.6041769297388705756845475807653849D-02,
     $        1.1502771707158349716665572488328492D-01,
     $        1.3876793407165529289929978866433564D-01,
     $        1.5606383170749418154423757328468988D-01,
     $        1.6597716604644043378449434000901111D-01,
     $        1.6790072599522973237955905351095302D-01,
     $        1.6161418109898563478758251034709524D-01,
     $        1.4731742157483728616689881185310110D-01,
     $        1.2563684813651289385289315092405981D-01,
     $        9.7603402278486127927670676543298945D-02,
     $        6.4605582582049084316989878471175139D-02,
     $        2.8359914459242940821985787743524440D-02/
c nsupp = 8; npols = 24; nquad = 26; error = 8.664E-73
        data xs4 /
     $       -9.9204289681372919014120765228101283D-01,
     $       -9.5867145831118255005057387426891685D-01,
     $       -9.0102313753821547768142364152357489D-01,
     $       -8.2299726785260720299364831346546347D-01,
     $       -7.2985659907269077820533979882578848D-01,
     $       -6.2783417503970771577559232943419111D-01,
     $       -5.2368917148321162432025953209396495D-01,
     $       -4.2423995171863390267938997236836099D-01,
     $       -3.3591147148231780452938479536148163D-01,
     $       -2.6433167104194706255309562124637643D-01,
     $       -2.1400960925704315147481440120306660D-01,
     $       -1.8805161924723515115598260261153207D-01,
     $       -1.8178851715162244376971737682337378D-01,
     $       -1.8051805554919366766041749664481824D-01,
     $       -1.4556860047337910200386629186878212D-01,
     $       -7.8992020615821293255018518667685511D-02,
     $        1.5840191036154607070573758876881262D-02,
     $        1.3326865503426508563239734500336444D-01,
     $        2.6629300902697459681029081151191551D-01,
     $        4.0701710267038783457755623030083799D-01,
     $        5.4715569792186805842900999796039077D-01,
     $        6.7858504013100838511030121307738457D-01,
     $        7.9391429552425236408710216547645953D-01,
     $        8.8704201377811619347891066853967090D-01,
     $        9.5360991516587570274657908777911536D-01,
     $        9.9116291803811910213463683742824058D-01/
        data ws4 /
     $        2.0351955420953410174879036669215937D-02,
     $        4.6028072092678594046924528875901094D-02,
     $        6.8612761231879461205241867372290166D-02,
     $        8.6555330211902378523517276170414719D-02,
     $        9.8679680794460487202844212256443329D-02,
     $        1.0423076480345219038991253126392427D-01,
     $        1.0291522134745408080939651924778335D-01,
     $        9.4905596310669286198913690771671859D-02,
     $        8.0807894095779471853098368571559575D-02,
     $        6.1596717550886472008102098855270539D-02,
     $        3.8490980176062787106458410459631327D-02,
     $        1.2302295791655204695253182584426492D-02,
     $       -1.0284223002241034894610682812083380D-02,
     $        2.6450596666407802145039686223806393D-02,
     $        5.0975529578533033294513526630647596D-02,
     $        8.1515774809951288053523410672316039D-02,
     $        1.0719903462893523144941319390465370D-01,
     $        1.2648374333575345276674776387666662D-01,
     $        1.3824044613628980997212336549349315D-01,
     $        1.4181763956416599802501263084961090D-01,
     $        1.3709599673907609142229878832634138D-01,
     $        1.2452143138002743065303172066657716D-01,
     $        1.0511213473106911978002676700610966D-01,
     $        8.0413625443912058673219259306121608D-02,
     $        5.2318450635422476436337349720278422D-02,
     $        2.2662549524863418008781497036928110D-02/
        

        if( inode .eq. 1 ) then

        ns=27
        do i=1,ns
        xs(i)=xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        if( inode .eq. 2 ) then

        ns=28
        do i=1,ns
        xs(i)=xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 3 ) then

        ns=26
        do i=1,ns
        xs(i)=xs3(i)
        ws(i)=ws3(i)
        enddo

        endif

        if( inode .eq. 4 ) then

        ns=26
        do i=1,ns
        xs(i)=xs4(i)
        ws(i)=ws4(i)
        enddo

        endif

        if( inode .eq. 5 ) then

        ns=26
        do i=1,ns
        xs(i)=-xs4(i)
        ws(i)=ws4(i)
        enddo

        endif

        if( inode .eq. 6 ) then

        ns=26
        do i=1,ns
        xs(i)=-xs3(i)
        ws(i)=ws3(i)
        enddo

        endif

        if( inode .eq. 7 ) then

        ns=28
        do i=1,ns
        xs(i)=-xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 8 ) then

        ns=27
        do i=1,ns
        xs(i)=-xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        return
        end
c
c
c
c
c
        subroutine hqsuppquad3x10(inode,xs,ws,ns) 
        implicit real *8 (a-h,o-z)
        dimension xs(*),ws(*)
c
        dimension xs1(33),ws1(33)
        dimension xs2(33),ws2(33)
        dimension xs3(32),ws3(32)
        dimension xs4(33),ws4(33)
        dimension xs5(34),ws5(34)
c
c
c       This subroutine returns to the user special-purpose
c       quadratures. The quadrature number k (k=1,2,...,10) integrates
c       functions of the form
c       
c       f(x)=phi(x)+psi(x)*log(|x-x_k|)+1/(x-x_k)+1/(x-x_k)^2,   (1)
c       
c       with phi and psi polynomials of order 20, and x_k one of the
c       Gaussian nodes on the interval [-1,1] (in a 10-point quadrature)
c
c       Approximate accuracy of the quadratures:
c
c       smooth, smooth x log - 15 digits ( 34 in extended precision )
c       hilbert - 11 digits ( 30 in extended precision calculations )
c       hypersingular - 9 digits ( 27 in extended precision calculations )
c       
c       Input parameters: 
c
c       inode - the node number of 10-point Legendre quadrature
c
c       Output parameters:
c
c       xs - the nodes of the quadrature
c       ws - the weights of the quadrature
c       ns - the number of quadrature points

c nsupp = 10; npols = 30; nquad = 33; error = 2.618E-71
        data xs1 /
     $       -9.9916304868305479378951597331256822D-01,
     $       -9.9585960949934364085347184353535633D-01,
     $       -9.9084532573447332963930337714238505D-01,
     $       -9.8525748547285601343697250900926269D-01,
     $       -9.8016780574419927527799570814053809D-01,
     $       -9.7639374578433637505217866470142316D-01,
     $       -9.7436646245109278166977791577493824D-01,
     $       -9.7354375038424623610342603557280622D-01,
     $       -9.7316613997391085822531148615042437D-01,
     $       -9.6357157714294391618241998644642006D-01,
     $       -9.4410606240629843726268791786802253D-01,
     $       -9.1371706362887717326686631245118784D-01,
     $       -8.7142151459124658765227198285270437D-01,
     $       -8.1640254021005535000182900672649343D-01,
     $       -7.4816227889411674438592766739842144D-01,
     $       -6.6662055634784014058672397254815436D-01,
     $       -5.7217582561038231248807081379136102D-01,
     $       -4.6573841281144198760094065365594703D-01,
     $       -3.4874228346651521416919137917684324D-01,
     $       -2.2314195551489949846973763391086962D-01,
     $       -9.1406488833094086444615646437266996D-02,
     $        4.3462948384311550224440543308521871D-02,
     $        1.7783123087209430811697345012418761D-01,
     $        3.0714737993279952088232374064753328D-01,
     $        4.2585817019463609348244585177721061D-01,
     $        5.3102285081702847761070756444492406D-01,
     $        6.2912119893441752670109455965011883D-01,
     $        7.2482882274904066239989633852043893D-01,
     $        8.1299406814514389881912783378960726D-01,
     $        8.8764105884260999480755575105138346D-01,
     $        9.4490183607934047478518593639575195D-01,
     $        9.8238348470371583616993909960650145D-01,
     $        9.9875440413312222862543744595392502D-01/
        data ws1 /
     $        2.1150663408183660388738516821635762D-03,
     $        4.3398966975372185399146144940624802D-03,
     $        5.4934652993096074928612020094739965D-03,
     $        5.4998976299846659271625676142105782D-03,
     $        4.5340442740332210559437135644665852D-03,
     $        2.8561800432370620011113717751535012D-03,
     $        7.7571011358595422820521526702480463D-04,
     $       -2.2011969200635169142052877992628797D-03,
     $        6.6790874989441274721632691115089107D-03,
     $        1.4332005378680585000409309720385754D-02,
     $        2.4759412128094825874765657414634834D-02,
     $        3.6186101874454799361450573430802643D-02,
     $        4.8543646211641047573168389308138095D-02,
     $        6.1578882236410944712727319594410224D-02,
     $        7.4915996393690369289336386905572164D-02,
     $        8.8101580781496222588498926484605723D-02,
     $        1.0063634168759517412323168561185479D-01,
     $        1.1199941295949538470448445749691790D-01,
     $        1.2166693697197066796190121850404550D-01,
     $        1.2912237034647830363228739666286968D-01,
     $        1.3384978195538130231070269287593104D-01,
     $        1.3528788057279082088509863687512354D-01,
     $        1.3269782038889072070692958636857938D-01,
     $        1.2497165845890718675799857869728342D-01,
     $        1.1174335569866824270078026926975970D-01,
     $        9.9944812305391280012734797227662718D-02,
     $        9.7207679121143096130523733188641128D-02,
     $        9.3103895846344210241997064260420548D-02,
     $        8.2212546190700786189567881584490240D-02,
     $        6.6452576685272027307436476273478154D-02,
     $        4.7677421916823463061080473317558712D-02,
     $        2.7057169318083360094365644104269049D-02,
     $        5.8585635942084729364923271037634977D-03/
c nsupp = 10; npols = 30; nquad = 33; error = 7.701E-71
        data xs2 /
     $       -9.9805763917113533778404473252810701D-01,
     $       -9.9000184247206582761203619544145297D-01,
     $       -9.7642841586607889291638288626197182D-01,
     $       -9.5875471647578058154191319043023970D-01,
     $       -9.3874833025982368363692181351335235D-01,
     $       -9.1831930590690794566255411535634825D-01,
     $       -8.9933687580591187382025307219343726D-01,
     $       -8.8347745362784213108552402296668360D-01,
     $       -8.7210734395323676224142695839319819D-01,
     $       -8.6616652306121100478934472938934021D-01,
     $       -8.6472186784011342226593483447697174D-01,
     $       -8.6398552068418933968735580832896362D-01,
     $       -8.5228968012562188975684436572389147D-01,
     $       -8.2666191937043923429450257228591900D-01,
     $       -7.8522978041814803068900478668587627D-01,
     $       -7.2728618701782707665072709383651844D-01,
     $       -6.5287896973026719074336070146000464D-01,
     $       -5.6270086707586232533739729838242365D-01,
     $       -4.5807431155665633827290935551316954D-01,
     $       -3.4096010220767497240011537813428400D-01,
     $       -2.1399138298501131151936420307476297D-01,
     $       -8.0585104038793433670373404913031328D-02,
     $        5.4720773208656389603572178219609089D-02,
     $        1.8555956232969318495275959828474404D-01,
     $        3.0497200111474262862200928037719499D-01,
     $        4.1607780051486778246131918751083540D-01,
     $        5.2968192048139851300560970302744764D-01,
     $        6.4303392599359249853095172600372207D-01,
     $        7.4799749643129842559824563288582009D-01,
     $        8.3878304442696211594127396375710924D-01,
     $        9.1152867127766971275364782110299752D-01,
     $        9.6354212611461439034177713583236885D-01,
     $        9.9303225533741512058805405776208316D-01/
        data ws2 /
     $        4.9573677792812397372488239008592438D-03,
     $        1.1010711827571019075098613871673472D-02,
     $        1.5896197198608710726705183379194986D-02,
     $        1.9153107025171016085261789308778195D-02,
     $        2.0538254766389295183954463361613826D-02,
     $        2.0005720605665657679396364877949933D-02,
     $        1.7677769445461695279878259089817760D-02,
     $        1.3812195043482298162951037956656467D-02,
     $        8.7523364905475868039499941423893367D-03,
     $        2.7542625895797121317697139904403766D-03,
     $       -9.2881631784626594932035044424246427D-04,
     $        6.1514905212206790990591822288023964D-03,
     $        1.8215481957055748379861035877515522D-02,
     $        3.3336216669360227111798370689782134D-02,
     $        4.9639639268134103138033964400983554D-02,
     $        6.6238287083027246679806969957428444D-02,
     $        8.2460555830477334453031740632741165D-02,
     $        9.7675380799475804735709797834965282D-02,
     $        1.1125139208471339725806956456065429D-01,
     $        1.2253970697237085121339041682767949D-01,
     $        1.3083313930548787397639433070487474D-01,
     $        1.3523627606790548985565723712470517D-01,
     $        1.3432253639661811502696484775339129D-01,
     $        1.2599131347989679489496457669387432D-01,
     $        1.1323813378787199992876059147576533D-01,
     $        1.1146379431626923023020377702873166D-01,
     $        1.1491435478485632200440365996087141D-01,
     $        1.1034281042379474172668493294229041D-01,
     $        9.8642416543928846577455108396100314D-02,
     $        8.2297025110309162081058269325080199D-02,
     $        6.2749342968195299465008042261666580D-02,
     $        4.0979172446230718261633295827790863D-02,
     $        1.7852426728888048985156394059174317D-02/
c nsupp = 10; npols = 30; nquad = 32; error = 7.851E-71
        data xs3 /
     $       -9.9683076861608576345021443102699931D-01,
     $       -9.8355219389604228274289479513682018D-01,
     $       -9.6066034538924466839222437446002042D-01,
     $       -9.2976217421214895168688632598898203D-01,
     $       -8.9299147847018329023763992317775480D-01,
     $       -8.5283371817424095555413705185846217D-01,
     $       -8.1194533797666849443895558202486092D-01,
     $       -7.7297768295488053873012567444603004D-01,
     $       -7.3841410114919371815557965021952988D-01,
     $       -7.1042653711696125542659427636146658D-01,
     $       -6.9075831822533106337978111056743297D-01,
     $       -6.8028404908368707148644169685718206D-01,
     $       -6.8005448920061796182707295124011821D-01,
     $       -6.7606366605557546301827461633388145D-01,
     $       -6.5386680915240651984491830160354062D-01,
     $       -6.1023797949851368050062209382796889D-01,
     $       -5.4691586201592308008115568058467156D-01,
     $       -4.6680323029319143803830544513671624D-01,
     $       -3.7421725850333234228900068445225765D-01,
     $       -2.7369082432880063959389214354291840D-01,
     $       -1.6563550405716217149955541133203423D-01,
     $       -4.6485906851512676448686182560556371D-02,
     $        8.3649627658080505079908696815061467D-02,
     $        2.2038290461122954817229235599573270D-01,
     $        3.5840558749833845794720998567530407D-01,
     $        4.9268156387870726047544989106109055D-01,
     $        6.1857095208048307365338344518385145D-01,
     $        7.3184622910169843933778135409155991D-01,
     $        8.2875130435071345411114635890982926D-01,
     $        9.0608827790634888218769460592194809D-01,
     $        9.6130919443402518247707500166372202D-01,
     $        9.9260593475938340226703163240560624D-01/
        data ws3 /
     $        8.1044266617825972548258672787456555D-03,
     $        1.8300613640852595908898355321158382D-02,
     $        2.7212417152326697345826538740279443D-02,
     $        3.4225368394295672293165703247985634D-02,
     $        3.8898739366551300808067988687708454D-02,
     $        4.0971085832899956250415524514321122D-02,
     $        4.0361054704114489312665089430825524D-02,
     $        3.7157958373346426874324195791302094D-02,
     $        3.1605201676780417842473178027902363D-02,
     $        2.4076589216657871795918238219436620D-02,
     $        1.5008172585477515411599947979187756D-02,
     $        1.0825748086090997214441271082219513D-02,
     $       -6.3951321711846382704849111222921594D-03,
     $        1.1011649800844624853005316173226081D-02,
     $        3.3123931748808873497452335302129385D-02,
     $        5.3849868489453559874500015692707853D-02,
     $        7.2317026181690306899695096272404248D-02,
     $        8.7178482220425366108419778814649987D-02,
     $        9.7147222771893993779273984303014273D-02,
     $        1.0380633367296569717964368768805564D-01,
     $        1.1310425602407654346939721744487442D-01,
     $        1.2515296587394874449933817062322558D-01,
     $        1.3431819245478466619964493553103187D-01,
     $        1.3825007764204861986111397133192204D-01,
     $        1.3695562361874602171312253681960394D-01,
     $        1.3082287545405073411712637266062225D-01,
     $        1.2025025948957265591015639539196702D-01,
     $        1.0567277747511293109049493383248368D-01,
     $        8.7602832064229019421274701445235813D-02,
     $        6.6645037893192599036154176515757532D-02,
     $        4.3493459545390232080365022990229543D-02,
     $        1.8944884058772910367684363968078449D-02/
c nsupp = 10; npols = 30; nquad = 33; error = 2.255E-71
        data xs4 /
     $       -9.9572190387876572211940177366357927D-01,
     $       -9.7771094906991589692285722169797852D-01,
     $       -9.4632026197234135707325146905065081D-01,
     $       -9.0321568836391669938557996293359121D-01,
     $       -8.5068128611696914826389779692131464D-01,
     $       -7.9148258833402250430414100549857896D-01,
     $       -7.2871137487313493762786504840349234D-01,
     $       -6.6561596842482610122687368137111086D-01,
     $       -6.0542384885231814040546901387706249D-01,
     $       -5.5116014864455972472342036704245599D-01,
     $       -5.0545827952895977715954965467621728D-01,
     $       -4.7034648674033211649284935721276447D-01,
     $       -4.4700118156531784825557992309119453D-01,
     $       -4.3551905344503551783233971951027183D-01,
     $       -4.3254069738062942150998343420738051D-01,
     $       -4.3147306184687729127252694080516067D-01,
     $       -4.0971793321306408062223645190996244D-01,
     $       -3.6834166555535741757047396344600304D-01,
     $       -3.0990880876931288520250130538331616D-01,
     $       -2.3710277455787695032635477632858306D-01,
     $       -1.5040492325476395286986385366466109D-01,
     $       -4.9236978976764873238715638371641877D-02,
     $        6.4985724298294006723615777949977106D-02,
     $        1.8867774891776864690804497141427980D-01,
     $        3.1730290652062792930191539619108589D-01,
     $        4.4607861753819897754001982272428728D-01,
     $        5.7026418261576857101476727856728574D-01,
     $        6.8532878882787499880394801124926605D-01,
     $        7.8709652081303066831029259058262563D-01,
     $        8.7188412642895138693252915861463074D-01,
     $        9.3662892098278285030292283489495393D-01,
     $        9.7901168479722107489138625948630393D-01,
     $        9.9785991536744313298367313395076164D-01/
        data ws4 /
     $        1.0950079712337312626991433888611573D-02,
     $        2.4920435182588766693771052598578692D-02,
     $        3.7581080126466724289329184658987938D-02,
     $        4.8245148127622741343267913638010051D-02,
     $        5.6360129169114403579793780374310237D-02,
     $        6.1519124098796452698402719991872068D-02,
     $        6.3478949352205152696756159212497486D-02,
     $        6.2170931323743080223637709678060138D-02,
     $        5.7706001566244919088363186902435583D-02,
     $        5.0379007034366504237958496822637657D-02,
     $        4.0682374211658861265646270083101521D-02,
     $        2.9340914451172766916996530885541362D-02,
     $        1.7288234726237621796778992273675456D-02,
     $        5.1197307393757618938399273278769514D-03,
     $       -3.7637700369204167192201640851147525D-03,
     $        1.4059347170424957143368315155497970D-02,
     $        3.1823323611897812059430550057646528D-02,
     $        5.0439701616928866842559328263139526D-02,
     $        6.5929029031512816207440498725954188D-02,
     $        7.9624844730249828911185196557533285D-02,
     $        9.3938156155254804383467960569711785D-02,
     $        1.0815453940058092601807438174457704D-01,
     $        1.1966880220491834494308202915242206D-01,
     $        1.2694867086246071106485862330251364D-01,
     $        1.2950043876290983821836726755817360D-01,
     $        1.2725823581115935065460374592442101D-01,
     $        1.2035535970198842051351645792457333D-01,
     $        1.0907555870209199757080868899624947D-01,
     $        9.3843892562110501061416564903975408D-02,
     $        7.5218935497737514450987725354094681D-02,
     $        5.3881454061324016323411761762549784D-02,
     $        3.0649432457411999320449160396727473D-02,
     $        7.6519078740266416806585493991572678D-03/
c nsupp = 10; npols = 30; nquad = 34; error = 7.975E-72
        data xs5 /
     $       -9.9660998222430809578511290112608010D-01,
     $       -9.8103220604145998930744463785709860D-01,
     $       -9.5088329174580324028229517169342050D-01,
     $       -9.0597418486078608737331041106942963D-01,
     $       -8.4755938309729163514996670774107979D-01,
     $       -7.7777130263688733471406914260673445D-01,
     $       -6.9937123646405931272933756797358879D-01,
     $       -6.1558539687555381289668043982293589D-01,
     $       -5.2994088866783052788222063434511296D-01,
     $       -4.4608890635776700322523599923578542D-01,
     $       -3.6761856393503701242253556754240297D-01,
     $       -2.9786398654140135973437457144513727D-01,
     $       -2.3969889469506591654648219825668236D-01,
     $       -1.9529887469868199390892241961836476D-01,
     $       -1.6586387128095512016791399562997170D-01,
     $       -1.5141622090244560589444092749156463D-01,
     $       -1.4812493203727172612561363447408203D-01,
     $       -1.4674041539098288674174056932781255D-01,
     $       -1.2489720883143043375530293485820377D-01,
     $       -8.2703773270452917522901822928890689D-02,
     $       -2.2250842969238309548574056024507537D-02,
     $        5.2631740980782636184422504923250329D-02,
     $        1.3585238289995721408678320814086490D-01,
     $        2.2064630508105455696401521311117006D-01,
     $        3.0911558860954305710350421546949235D-01,
     $        4.0802441067540150231914694725864511D-01,
     $        5.1406153842540419093984203156763866D-01,
     $        6.2029071331901674888320757183332373D-01,
     $        7.2087379542916072352667296055417719D-01,
     $        8.1104995737378918687751782418997753D-01,
     $        8.8686087632028110228735231333411571D-01,
     $        9.4509699840550733827916169739816676D-01,
     $        9.8333307995186039882221682987364233D-01,
     $        9.9987142693230646107700224661397614D-01/
        data ws5 /
     $        8.8673405506269663348462589933522818D-03,
     $        2.2668451597171962844838614230760178D-02,
     $        3.7644640985779796018386032207043130D-02,
     $        5.1955601224759982183621234985153890D-02,
     $        6.4515068313624438085467337482055314D-02,
     $        7.4598290842081079684537592081136534D-02,
     $        8.1661418361613254507748903355526644D-02,
     $        8.5319450334345483610502885101230404D-02,
     $        8.5357922091326554592258618704673248D-02,
     $        8.1744652327001985323980597521015223D-02,
     $        7.4636969975494610650777688698314147D-02,
     $        6.4389344022893976595480383228086470D-02,
     $        5.1573356342693284972924604670701965D-02,
     $        3.7022683245514534586614034233954828D-02,
     $        2.1820184002042560465301009099617667D-02,
     $        6.6259931537887824171243759894737359D-03,
     $       -2.2277817216361459571270251669345558D-03,
     $        1.2548582157458681794119182177473235D-02,
     $        3.2201436062801789247926910903007081D-02,
     $        5.1813320986873583139272699400009560D-02,
     $        6.8467929435580888981933187280605371D-02,
     $        8.0285473579661442237828167676799442D-02,
     $        8.4815305203110528900063911850802782D-02,
     $        8.5137350185707705882433564884096947D-02,
     $        9.3364702550669946155522713209603685D-02,
     $        1.0364755761280872888685425869178814D-01,
     $        1.0721868507319132301220395942546819D-01,
     $        1.0427532116287349541458968058896955D-01,
     $        9.6101778243822051532626560624383614D-02,
     $        8.3591353801170326202158921464665724D-02,
     $        6.7494782866673822581703649264949707D-02,
     $        4.8572509321990833708494498828174198D-02,
     $        2.7631638876600764632366579151532647D-02,
     $        4.6586872298809807726184091625090242D-03/

        if( inode .eq. 1 ) then

        ns=33
        do i=1,ns
        xs(i)=xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        if( inode .eq. 2 ) then

        ns=33
        do i=1,ns
        xs(i)=xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 3 ) then

        ns=32
        do i=1,ns
        xs(i)=xs3(i)
        ws(i)=ws3(i)
        enddo

        endif

        if( inode .eq. 4 ) then

        ns=33
        do i=1,ns
        xs(i)=xs4(i)
        ws(i)=ws4(i)
        enddo

        endif

        if( inode .eq. 5 ) then

        ns=34
        do i=1,ns
        xs(i)=xs5(i)
        ws(i)=ws5(i)
        enddo

        endif

        if( inode .eq. 6 ) then

        ns=34
        do i=1,ns
        xs(i)=-xs5(i)
        ws(i)=ws5(i)
        enddo

        endif

        if( inode .eq. 7 ) then

        ns=33
        do i=1,ns
        xs(i)=-xs4(i)
        ws(i)=ws4(i)
        enddo

        endif

        if( inode .eq. 8 ) then

        ns=32
        do i=1,ns
        xs(i)=-xs3(i)
        ws(i)=ws3(i)
        enddo

        endif

        if( inode .eq. 9 ) then

        ns=33
        do i=1,ns
        xs(i)=-xs2(i)
        ws(i)=ws2(i)
        enddo

        endif

        if( inode .eq. 10 ) then

        ns=33
        do i=1,ns
        xs(i)=-xs1(i)
        ws(i)=ws1(i)
        enddo

        endif

        return
        end
c
c
c
c
c
